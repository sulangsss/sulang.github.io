<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sulang blog</title>
  
  <subtitle>python java android django web</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sulangsss.github.io/"/>
  <updated>2018-12-18T16:04:32.445Z</updated>
  <id>https://sulangsss.github.io/</id>
  
  <author>
    <name>sulang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SS和SSR的原理</title>
    <link href="https://sulangsss.github.io/2018/12/18/Network/SS%20SSR%20%E5%8E%9F%E7%90%86/"/>
    <id>https://sulangsss.github.io/2018/12/18/Network/SS SSR 原理/</id>
    <published>2018-12-18T13:56:19.000Z</published>
    <updated>2018-12-18T16:04:32.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><h4 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h4><p>SS全称是Shadowsocks，是一种基于Socks5代理方式的加密传输协议。</p><p>Shadowsocks是一种基于Socks5代理方式的网络数据加密传输包，并采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。目前包使用Python、C、C++、C#、Go语言等编程语言开发。</p><p>特点</p><ul><li>Shadowsocks使用自行设计的协议进行加密通信。加密算法有AES、Blowfish、IDEA、RC4等，除创建TCP连接外无需握手，每次请求只转发一个连接，无需保持“一直连线”的状态，因此在移动设备上相对较为省电。</li><li>所有的流量都经过算法加密，允许自行选择算法。</li><li>Shadowsocks通过异步I/O和事件驱动程序运行，响应速度快。</li></ul><p>安全性</p><ul><li>在某些极端的环境下，通过深度包检测（DPI）也有可能识别出协议特征。</li><li>通过随机森林算法检测Shadowsocks流量的方法，并自称可达到85％的检测精度。</li></ul><blockquote><p>shadowsocks.org</p></blockquote><h4 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h4><p>ShadowsocksR是breakwa11发起的Shadowsocks分支，在Shadowsocks的基础上增加了一些数据混淆方式，称修复了部分安全问题并可以提高QoS优先级。</p><h3 id="Socks5"><a href="#Socks5" class="headerlink" title="Socks5"></a>Socks5</h3><p>Socks5是属于TCP/IP模型中应用层的协议，因此从以上的网络连接过程，就可以理解基于Socks5协议的请求由客户机到代理机的整个过程如下：</p><ul><li>将用户数据添加SOCKS5头部，发到传输层；</li><li>传输层将SOCKS5协议数据分段，添加TCP/UDP协议数据发到网络层；</li><li>网络层将TCP/UDP协议数据添加IP协议头，发往链路层；</li><li>链路层添加帧头与尾，将数据封装成帧发往代理机。</li></ul><h4 id="Socks5工作原理"><a href="#Socks5工作原理" class="headerlink" title="Socks5工作原理"></a>Socks5工作原理</h4><p>Socks5客户端  <---socks5--->  Socks5服务器  &lt;—正常请求—&gt;  目标主机</---socks5---></p><p>Socks5客户端在与Socks5服务器交互的整个过程是有可能暴露在整个互联网中的，因此很容易被监控到，根据协议特征也可以很容易识别出来。</p><h4 id="Shadowsocks-Socks5工作原理"><a href="#Shadowsocks-Socks5工作原理" class="headerlink" title="Shadowsocks Socks5工作原理"></a>Shadowsocks Socks5工作原理</h4><p>Socks5客户端  <---socks5--->  sslocal  &lt;–密文–&gt; ss-server  &lt;—正常请求—&gt;  目标主机</---socks5---></p><p>Shadowsocks的处理方式是将Socks5客户端与Socks5服务器的连接提前，Socks5协议的交互完全是在本地进行的，在网络中传输的完全是利用加密算法加密后的密文，这就很好的进行了去特征化，使得传输的数据不是很容易的被特征识别。</p><p>差异部分：</p><ul><li>本地的sslocal：sslocal对于Socks5客户端便是Socks5服务器,对于Socks5客户端是透明的，sslocal完成与Socks5客户端所有的交互。</li><li>远程的ssserver：ssserver对于目标主机同样也是Socks5服务器，对于目标主机是透明的，完成Socks5服务器与目标主机的所有操作。</li><li>sslocal-ssserver:sslocal接收到Socks5客户端发送的数据，会将数据加密，并将配置信息发送到ssserver，ssserver接收到配置信息进行权限验证，然后将数据进行解密，然后将明文发往目标主机；当目标主机响应ssserver，ssserver将接收到的数据进行解包，并将数据加密，发送到sslocal，sslocal接收到加密后的数据进行解密，再发送给Socks 5客户端，这就完成了一次交互。</li></ul><h3 id="阻断技术"><a href="#阻断技术" class="headerlink" title="阻断技术"></a>阻断技术</h3><h4 id="DNS污染-劫持"><a href="#DNS污染-劫持" class="headerlink" title="DNS污染/劫持"></a>DNS污染/劫持</h4><p>在进行域名访问时，首先会将域名通过dns解析为对应的真实IP，然后通过IP进行HTTP访问，所谓DNS攻击手段，即通过某种手段使得客户机发起DNS查询但得到的却是错误的IP，导致客户机无法正常访问。 防火长城会在骨干网出口的53端口进行IDS入侵检测，检测到黑名单域名等，会伪装成域名服务器向客户机发送虚假的回应，由于DNS查询请求一般是基于UDP无连接传输层协议，该协议特征是无状态连接、不可靠传输，DNS查询会接收最先到达的请求，抛弃之后到达的请求，因此导致客户机被欺骗，请求被重定位到虚假IP。</p><hr><h4 id="IP封锁"><a href="#IP封锁" class="headerlink" title="IP封锁"></a>IP封锁</h4><p>在客户机发送请求到服务器的过程中会经过一系列路由的转发，在路由器转发的过程中会根据路由表中存储的表项来决定下一跳的路由器或主机，选择的下一跳地址会根据路由协议来决定。 早期使用的是ACL（访问控制列表）来进行IP黑名单限制，现在更高效的路由扩散技术来进行对特定的IP进行封锁。早期路由器都是采用静态路由协议，每一条路由需要进行人工来配置路由表项，或者配置一些策略，在决定路由转发，这时可以通过检测，对相应要封锁的IP配置一条错误的路由，将之牵引到一个不做任何操作的服务器（黑洞服务器），此服务器所要做的就是丢包，这样便无声息封锁掉了。动态路由协议的出现可以更高效的进行屏蔽，动态路由协议可以让路由器通过交换路由表信息来动态更新路由表，并通过寻址算法来决定最优化的路径。因此可以通过动态路由协议的路由重分发功能将错误的信息散播到整个网络，从而达到屏蔽目的。</p><hr><h4 id="IP-端口黑名单"><a href="#IP-端口黑名单" class="headerlink" title="IP/端口黑名单"></a>IP/端口黑名单</h4><p>该手段可以结合上边提到的IP封锁技术，将封锁精确到具体的端口，使该IP的具体端口接收不到请求，从而达到更细粒度的封锁。</p><p>经常被封锁的端口如下：</p><ul><li>SSH的TCP协议22端口</li><li>HTTP的80端口</li><li>PPTP类型VPN使用的TCP协议1723端口</li><li>L2TP类型VPN使用的UDP协议1701端口</li><li>IPSec类型VPN使用的UDP协议500端口和4500端口</li><li>OpenVPN默认使用的TCP协议和UDP协议的1194端口</li><li>TLS/SSL/HTTPS的TCP协议443端口</li><li>Squid Cache的TCP协议3128端口</li></ul><hr><h4 id="无状态TCP连接重置"><a href="#无状态TCP连接重置" class="headerlink" title="无状态TCP连接重置"></a>无状态TCP连接重置</h4><p>TCP连接会有三次握手，此种攻击方式利用了该特点来进行攻击，gfw会对特定IP的所有数据包进行监控，会对特定黑名单动作进行监控（如TLS加密连接），当进行TCP连接时，会在TCP连接的第二部SYNC-ACK阶段，伪装成客户端和服务器同时向真实的客户端和服务器发送RESET重置，以很低的成本来达到切断双方连接的目的。与丢弃客户机的包相比，在丢包后客户机会不断的发起重试，这样会加重黑洞服务器的负担，利用TCP连接重置来断开连接，客户机也不必发送ACK来确认，这样成本就要低得多。</p><hr><h4 id="TCP协议关键字阻断"><a href="#TCP协议关键字阻断" class="headerlink" title="TCP协议关键字阻断"></a>TCP协议关键字阻断</h4><p>该手段在无状态TCP连接重置手段之上，加入了关键字过滤功能，当协议的头部包含特定的关键字便对其连接进行重置，比如HTTP协议、ED2K协议等等。</p><hr><h4 id="深度包检测"><a href="#深度包检测" class="headerlink" title="深度包检测"></a>深度包检测</h4><p>深度数据包检测（Deep packet inspection,DPI）是一种于应用层对网络上传递的数据进行侦测与处理的技术，被广泛用于入侵检测、流量分析及数据挖掘。就字面意思考虑，所谓“深度”是相对于普通的报文检测而言的——DPI可对报文内容和协议特征进行检测。基于必要的硬件设施、适宜的检测模型及相应的模式匹配算法，gfw能够精确且快速地从实时网络环境中判别出有悖于预期标准的可疑流量，并对此及时作出审查者所期望的应对措施。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote><p>Shadowsocks原理详解(上篇):<a href="https://sq.163yun.com/blog/article/185530682109534208" target="_blank" rel="noopener">https://sq.163yun.com/blog/article/185530682109534208</a><br>Shadowsocks原理详解(中篇):<a href="https://sq.163yun.com/blog/article/185531711118745600" target="_blank" rel="noopener">https://sq.163yun.com/blog/article/185531711118745600</a><br>Shadowsocks原理详解(下篇):<a href="https://sq.163yun.com/blog/article/185532158474821632" target="_blank" rel="noopener">https://sq.163yun.com/blog/article/185532158474821632</a><br>shadowsocks实现原理:<a href="https://bingtaoli.github.io/2016/11/23/shadowsocks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">https://bingtaoli.github.io/2016/11/23/shadowsocks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;h4 id=&quot;SS&quot;&gt;&lt;a href=&quot;#SS&quot; class=&quot;
      
    
    </summary>
    
      <category term="Network" scheme="https://sulangsss.github.io/categories/Network/"/>
    
    
      <category term="Network" scheme="https://sulangsss.github.io/tags/Network/"/>
    
      <category term="SS" scheme="https://sulangsss.github.io/tags/SS/"/>
    
      <category term="SSR" scheme="https://sulangsss.github.io/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>Socks5协议</title>
    <link href="https://sulangsss.github.io/2018/12/18/Network/Socks5/Socks5%E5%8D%8F%E8%AE%AE/"/>
    <id>https://sulangsss.github.io/2018/12/18/Network/Socks5/Socks5协议/</id>
    <published>2018-12-18T13:56:19.000Z</published>
    <updated>2018-12-18T15:36:17.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是”SOCKetS”的缩写。</p><p>当防火墙后的客户端要访问外部的服务器时，就跟SOCKS代理服务器连接。这个代理服务器控制客户端访问外网的资格，允许的话，就将客户端的请求发往外部的服务器。</p><img src="/2018/12/18/Network/Socks5/Socks5协议/tcpip-model.jpg"><p>根据OSI模型，SOCKS是会话层的协议，位于表示层与传输层之间。TCP/IP模型的应用层对应OSI的前三层，网络接入层对应OSI的最后两层。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote><p>shadowsocks实现原理:<a href="https://bingtaoli.github.io/2016/11/23/shadowsocks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">https://bingtaoli.github.io/2016/11/23/shadowsocks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</a><br>协议官方规范：<a href="https://www.ietf.org/rfc/rfc1928.txt" target="_blank" rel="noopener">https://www.ietf.org/rfc/rfc1928.txt</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间
      
    
    </summary>
    
      <category term="Network" scheme="https://sulangsss.github.io/categories/Network/"/>
    
    
      <category term="Network" scheme="https://sulangsss.github.io/tags/Network/"/>
    
      <category term="Socks5" scheme="https://sulangsss.github.io/tags/Socks5/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bood Read Resource</title>
    <link href="https://sulangsss.github.io/2018/12/18/Java/SpringBoot/Resource/ReadResource/"/>
    <id>https://sulangsss.github.io/2018/12/18/Java/SpringBoot/Resource/ReadResource/</id>
    <published>2018-12-18T04:30:22.000Z</published>
    <updated>2018-12-18T10:34:40.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  resources/keys/private.pem -&gt; path=/keys/private.pem</span></span><br><span class="line"><span class="function">fun <span class="title">readResourceFile</span><span class="params">(path: String, charset: Charset = Charsets.UTF_8)</span>: String </span>&#123;</span><br><span class="line">    val classResource = ClassPathResource(path)</span><br><span class="line">    <span class="keyword">return</span> classResource.file.readText(charset)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Spring Boot" scheme="https://sulangsss.github.io/categories/Java/Spring-Boot/"/>
    
      <category term="Resource" scheme="https://sulangsss.github.io/categories/Java/Spring-Boot/Resource/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://sulangsss.github.io/tags/SpringBoot/"/>
    
      <category term="Resource" scheme="https://sulangsss.github.io/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>Linux Generate RSA Key</title>
    <link href="https://sulangsss.github.io/2018/12/18/Linux/Generate-RSA-Key/"/>
    <id>https://sulangsss.github.io/2018/12/18/Linux/Generate-RSA-Key/</id>
    <published>2018-12-18T03:49:06.000Z</published>
    <updated>2018-12-18T13:56:45.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSH-Key"><a href="#SSH-Key" class="headerlink" title="SSH-Key"></a>SSH-Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -b 2048 -t rsa -f id_rsa -P <span class="string">""</span></span><br></pre></td></tr></table></figure><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Private Key</span></span><br><span class="line">openssl genrsa -out private.pem 2048</span><br><span class="line"><span class="comment"># Convert Private Key to PKCS8</span></span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -<span class="keyword">in</span> private.pem -out private.key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Public Key</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> private.key -outform PEM -pubout -out public.pem</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SSH-Key&quot;&gt;&lt;a href=&quot;#SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;SSH-Key&quot;&gt;&lt;/a&gt;SSH-Key&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="https://sulangsss.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://sulangsss.github.io/tags/Linux/"/>
    
      <category term="RSA" scheme="https://sulangsss.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Request Filter</title>
    <link href="https://sulangsss.github.io/2018/12/18/Java/SpringBoot/Filter/RequestFilter/"/>
    <id>https://sulangsss.github.io/2018/12/18/Java/SpringBoot/Filter/RequestFilter/</id>
    <published>2018-12-18T02:50:22.000Z</published>
    <updated>2018-12-18T03:49:56.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="OncePerRequestFilter"><a href="#OncePerRequestFilter" class="headerlink" title="OncePerRequestFilter"></a>OncePerRequestFilter</h3><p>For our one request, this filter will execute exactly one time (no more no less). This behavior is very useful while working with security authentication.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class AuthorizationFilter : OncePerRequestFilter() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">doFilterInternal</span><span class="params">(request: HttpServletRequest, response: HttpServletResponse, filter: FilterChain)</span> </span>&#123;</span><br><span class="line">        val token = request.getHeader(HttpHeaders.AUTHORIZATION)</span><br><span class="line">                ?: <span class="keyword">throw</span> SecurityException(ErrorInfo(ErrorCode.TOKEN_NOT_FOUND).toJson())</span><br><span class="line">        val claims = JwtUtil.parseJwt(token, Keys.ssoPublicKey)</span><br><span class="line">                ?: <span class="keyword">throw</span> SecurityException(ErrorInfo(ErrorCode.TOKEN_NOT_FOUND).toJson())</span><br><span class="line"></span><br><span class="line">        val userId = JwtUtil.getUserId(claims)</span><br><span class="line">        request.setAttribute(<span class="string">"userId"</span>, userId)</span><br><span class="line">        request.setAttribute(<span class="string">"claims"</span>, claims)</span><br><span class="line"></span><br><span class="line">        filter.doFilter(request, response)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">fun <span class="title">configFilter</span><span class="params">()</span>: FilterRegistrationBean&lt;AuthorizationFilter&gt; </span>&#123;</span><br><span class="line">        val registration = FilterRegistrationBean&lt;AuthorizationFilter&gt;()</span><br><span class="line">        registration.filter = AuthorizationFilter()</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>)</span><br><span class="line">        registration.setName(<span class="string">"AuthorizationFilter"</span>)</span><br><span class="line">        registration.order = Ordered.HIGHEST_PRECEDENCE</span><br><span class="line">        <span class="keyword">return</span> registration</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  contracts</span></span><br><span class="line">StandaloneMockMvcBuilder mockMvc = MockMvcBuilders.standaloneSetup(</span><br><span class="line">        <span class="keyword">new</span> OrderController(),</span><br><span class="line">        <span class="keyword">new</span> PositionController()</span><br><span class="line">).addFilters(<span class="keyword">new</span> AuthorizationFilter());</span><br><span class="line">RestAssuredMockMvc.standaloneSetup(mockMvc);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;OncePerRequestFilter&quot;&gt;&lt;a href=&quot;#OncePerRequestFilter&quot; class=&quot;headerlink&quot; title=&quot;OncePerRequestFilter&quot;&gt;&lt;/a&gt;OncePerRequestFilter&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Spring Boot" scheme="https://sulangsss.github.io/categories/Java/Spring-Boot/"/>
    
      <category term="Spring Filter" scheme="https://sulangsss.github.io/categories/Java/Spring-Boot/Spring-Filter/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://sulangsss.github.io/tags/SpringBoot/"/>
    
      <category term="RequestFilter" scheme="https://sulangsss.github.io/tags/RequestFilter/"/>
    
  </entry>
  
  <entry>
    <title>IDE Intellij Plugins</title>
    <link href="https://sulangsss.github.io/2018/12/17/Tools/IDE/Intellij-Plugin/"/>
    <id>https://sulangsss.github.io/2018/12/17/Tools/IDE/Intellij-Plugin/</id>
    <published>2018-12-17T06:28:19.000Z</published>
    <updated>2018-12-17T15:01:05.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Convertor"><a href="#Convertor" class="headerlink" title="Convertor"></a>Convertor</h3><ul><li>JsonToKotlinClass</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Convertor&quot;&gt;&lt;a href=&quot;#Convertor&quot; class=&quot;headerlink&quot; title=&quot;Convertor&quot;&gt;&lt;/a&gt;Convertor&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JsonToKotlinClass&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="Tools" scheme="https://sulangsss.github.io/categories/Tools/"/>
    
      <category term="IDE" scheme="https://sulangsss.github.io/categories/Tools/IDE/"/>
    
    
      <category term="Plugins" scheme="https://sulangsss.github.io/tags/Plugins/"/>
    
      <category term="Tools" scheme="https://sulangsss.github.io/tags/Tools/"/>
    
      <category term="IDE" scheme="https://sulangsss.github.io/tags/IDE/"/>
    
      <category term="Intellij" scheme="https://sulangsss.github.io/tags/Intellij/"/>
    
  </entry>
  
  <entry>
    <title>Rust macro_ruules!</title>
    <link href="https://sulangsss.github.io/2018/12/16/Rust/Basic/macro_rules!/"/>
    <id>https://sulangsss.github.io/2018/12/16/Rust/Basic/macro_rules!/</id>
    <published>2018-12-16T15:20:03.000Z</published>
    <updated>2018-12-16T16:18:03.489Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Rust provides a powerful macro system that allows metaprogramming. macros look like functions, except that their name ends with a bang !, but instead of generating a function call, macros are expanded into source code that gets compiled with the rest of the program. </p><p>However, unlike macros in C and other languages, <strong>Rust macros are expanded into abstract syntax trees, rather than string preprocessing, so you don’t get unexpected precedence bugs.</strong></p><p>Advantage</p><ul><li>Don’t repeat yourself. There are many cases where you may need similar functionality in multiple places but with different types. Often, writing a macro is a useful way to avoid repeating code.</li><li>Domain-specific languages. Macros allow you to define special syntax for a specific purpose. </li><li>Variadic interfaces. Sometime you want to define an interface that takes a variable number of arguments. An example is println! which could take any number of arguments, depending on the format string!</li></ul><blockquote><p>Syntax: <a href="https://doc.rust-lang.org/rust-by-example/macros/syntax.html" target="_blank" rel="noopener">https://doc.rust-lang.org/rust-by-example/macros/syntax.html</a></p></blockquote><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="Case-Hello"><a href="#Case-Hello" class="headerlink" title="Case: Hello"></a>Case: Hello</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is a simple macro named `say_hello`.</span></span><br><span class="line"><span class="built_in">macro_rules!</span> say_hello &#123;</span><br><span class="line">    <span class="comment">// `()` indicates that the macro takes no argument.</span></span><br><span class="line">    () =&gt; (</span><br><span class="line">        <span class="comment">// The macro will expand into the contents of this block.</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Hello!"</span>);</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// This call will expand into `println!("Hello");`</span></span><br><span class="line">    say_hello!()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;Rust provides a powerful macro
      
    
    </summary>
    
      <category term="Rust" scheme="https://sulangsss.github.io/categories/Rust/"/>
    
      <category term="Basic" scheme="https://sulangsss.github.io/categories/Rust/Basic/"/>
    
    
      <category term="Rust" scheme="https://sulangsss.github.io/tags/Rust/"/>
    
      <category term="Primer" scheme="https://sulangsss.github.io/tags/Primer/"/>
    
      <category term="Macro" scheme="https://sulangsss.github.io/tags/Macro/"/>
    
  </entry>
  
  <entry>
    <title>CPU DeadLock</title>
    <link href="https://sulangsss.github.io/2018/12/16/CS/CPU/DeadLock/"/>
    <id>https://sulangsss.github.io/2018/12/16/CS/CPU/DeadLock/</id>
    <published>2018-12-16T07:44:07.000Z</published>
    <updated>2018-12-16T07:44:34.360Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CPU" scheme="https://sulangsss.github.io/categories/CPU/"/>
    
    
      <category term="CPU" scheme="https://sulangsss.github.io/tags/CPU/"/>
    
      <category term="DeadLock" scheme="https://sulangsss.github.io/tags/DeadLock/"/>
    
  </entry>
  
  <entry>
    <title>CPU Dispatch</title>
    <link href="https://sulangsss.github.io/2018/12/16/CS/CPU/Dispatch/"/>
    <id>https://sulangsss.github.io/2018/12/16/CS/CPU/Dispatch/</id>
    <published>2018-12-16T07:28:07.000Z</published>
    <updated>2018-12-16T16:13:31.097Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CPU" scheme="https://sulangsss.github.io/categories/CPU/"/>
    
    
      <category term="CPU" scheme="https://sulangsss.github.io/tags/CPU/"/>
    
      <category term="Dispatch" scheme="https://sulangsss.github.io/tags/Dispatch/"/>
    
  </entry>
  
  <entry>
    <title>Rust Trait</title>
    <link href="https://sulangsss.github.io/2018/12/16/Rust/Basic/Trait/"/>
    <id>https://sulangsss.github.io/2018/12/16/Rust/Basic/Trait/</id>
    <published>2018-12-16T07:20:03.000Z</published>
    <updated>2018-12-16T16:12:44.639Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>A trait is a collection of methods defined for an unknown type: Self. They can access other methods declared in the same trait.Traits can be implemented for any data type.</p><p>Rust’Trait is like Java’Interface.</p><ul><li>Derive</li><li>Operator Overloading</li><li>Drop</li><li>Iterators</li><li>Clone</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="Case-Hello"><a href="#Case-Hello" class="headerlink" title="Case: Hello"></a>Case: Hello</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sheep</span></span> &#123; naked: <span class="built_in">bool</span>, name: &amp;<span class="symbol">'static</span> <span class="built_in">str</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Animal</span></span> &#123;</span><br><span class="line">    <span class="comment">// Static method signature; `Self` refers to the implementor type.</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(name: &amp;<span class="symbol">'static</span> <span class="built_in">str</span>) -&gt; <span class="keyword">Self</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instance method signatures; these will return a string.</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">name</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;<span class="symbol">'static</span> <span class="built_in">str</span>;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">noise</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;<span class="symbol">'static</span> <span class="built_in">str</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Traits can provide default method definitions.</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">talk</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125; says &#123;&#125;"</span>, <span class="keyword">self</span>.name(), <span class="keyword">self</span>.noise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Sheep &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">is_naked</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.naked</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">shear</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.is_naked() &#123;</span><br><span class="line">            <span class="comment">// Implementor methods can use the implementor's trait methods.</span></span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125; is already naked..."</span>, <span class="keyword">self</span>.name());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125; gets a haircut!"</span>, <span class="keyword">self</span>.name);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.naked = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implement the `Animal` trait for `Sheep`.</span></span><br><span class="line"><span class="keyword">impl</span> Animal <span class="keyword">for</span> Sheep &#123;</span><br><span class="line">    <span class="comment">// `Self` is the implementor type: `Sheep`.</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(name: &amp;<span class="symbol">'static</span> <span class="built_in">str</span>) -&gt; Sheep &#123;</span><br><span class="line">        Sheep &#123; name: name, naked: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">name</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;<span class="symbol">'static</span> <span class="built_in">str</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">noise</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;<span class="symbol">'static</span> <span class="built_in">str</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.is_naked() &#123;</span><br><span class="line">            <span class="string">"baaaaah?"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="string">"baaaaah!"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default trait methods can be overridden.</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">talk</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// For example, we can add some quiet contemplation.</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125; pauses briefly... &#123;&#125;"</span>, <span class="keyword">self</span>.name, <span class="keyword">self</span>.noise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// Type annotation is necessary in this case.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> dolly: Sheep = Animal::new(<span class="string">"Dolly"</span>);</span><br><span class="line">    <span class="comment">// TODO ^ Try removing the type annotations.</span></span><br><span class="line"></span><br><span class="line">    dolly.talk();</span><br><span class="line">    dolly.shear();</span><br><span class="line">    dolly.talk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dolly pauses briefly... baaaaah!</span><br><span class="line">Dolly gets a haircut!</span><br><span class="line">Dolly pauses briefly... baaaaah?</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;A trait is a collection of met
      
    
    </summary>
    
      <category term="Rust" scheme="https://sulangsss.github.io/categories/Rust/"/>
    
      <category term="Basic" scheme="https://sulangsss.github.io/categories/Rust/Basic/"/>
    
    
      <category term="Rust" scheme="https://sulangsss.github.io/tags/Rust/"/>
    
      <category term="Primer" scheme="https://sulangsss.github.io/tags/Primer/"/>
    
      <category term="Trait" scheme="https://sulangsss.github.io/tags/Trait/"/>
    
  </entry>
  
  <entry>
    <title>BlockChain UTXO</title>
    <link href="https://sulangsss.github.io/2018/12/16/BlockChain/UTXO/"/>
    <id>https://sulangsss.github.io/2018/12/16/BlockChain/UTXO/</id>
    <published>2018-12-16T03:30:18.000Z</published>
    <updated>2018-12-16T05:47:33.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>UTXO是Unspent Transaction Output的缩写，是比特币发明人”中本聪“的天才设计。</p><p>本质上，UTXO就是流水账。了解过一点点会计学，见过企业记账的同学都知道，我们现在的会计系统绝大部分采用的是一种叫做”借贷记账法“的方法，账目分成借方和贷方，每发生一笔业务都要登记两个以上的科目。</p><p>简单来说，Alice转账给Bob 1美元，使用借贷记账法至少要产生两条账目，Alice账户减少1美元，Bob账户增加1美元。这种记账法在企业经营、企业审计中有无数的好处，这里就不详述了。但是这种记账法也有一个最大的缺点，就是容易产生记账错误和记账误差。一笔交易需要登记两条以上的账目，本质上记录的是“交易的结果”，而不是“交易本身”。</p><p>如果让一个程序员来设计基于“借贷记账法”的账本，数据库中记录的就是每一个账户的变动情况和余额。在数据库系统中，需要一系列额外的规则，来确保交易成功地进行。在Alice给Bob转账1美元的操作中，系统首先需要检查Alice账户余额是否大于等于1美元，然后检查Bob的账户地址是否合法，最后才是Alice账户减1，Bob账户加1。</p><p>上述过程是不是非常复杂？其实会计的工作之所以那么忙，就是因为他们每天都要把交易拆分成不同的科目去记录。不同的会计对交易理解不同，可能记录的科目就不一样（当然在简单的转账系统中，不存在这个问题），于是产生了记账差异。</p><p>“中本聪”没有采用这种复杂的记账方案，而是采用了一种追踪比特币的流水账记录法——UTXO。<strong>本质上，就是只记录交易本身，而不记录交易的结果。</strong>从金融系统设计角度来说，这种方式有点“交易清算分离”的意思。区块链系统只处理所有的交易，而需要清算、查看余额等信息，由区块链节点自行处理。</p><p>UTXO系统遵守两个规则：</p><ul><li>除了CoinBase(挖矿交易)之外，所有的资金来源都必须来自前面某一个或者几个交易的UTXO；</li><li>任何一笔交易的输入总量必须等于输出总量，等式两边必须配平。</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>我们假设一个这样的场景：张三挖到12.5枚比特币。过了几天，他把其中2.5枚支付给李四。又过了几天，他和李四各出资2.5比特币凑成5比特币付给王五。</p><p>如果是基于账户的设计，张、李、王三人在数据库中各有一个账户，则他们三人的账户变化如下图所示：</p><img src="/2018/12/16/BlockChain/UTXO/utxo-account.jpg"><hr><p>如果基于UTXO的设计，如下图所示：</p><img src="/2018/12/16/BlockChain/UTXO/utxo-transaction.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;UTXO是Unspent Transaction Outpu
      
    
    </summary>
    
      <category term="BlockChain" scheme="https://sulangsss.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="https://sulangsss.github.io/tags/BlockChain/"/>
    
      <category term="Terms" scheme="https://sulangsss.github.io/tags/Terms/"/>
    
      <category term="UTXO" scheme="https://sulangsss.github.io/tags/UTXO/"/>
    
  </entry>
  
  <entry>
    <title>BlockChain ZCash 零知识证明</title>
    <link href="https://sulangsss.github.io/2018/12/16/BlockChain/ZCash%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E/"/>
    <id>https://sulangsss.github.io/2018/12/16/BlockChain/ZCash零知识证明/</id>
    <published>2018-12-15T16:30:18.000Z</published>
    <updated>2018-12-16T07:06:58.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/24440530" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24440530</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;h3 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Refe
      
    
    </summary>
    
      <category term="BlockChain" scheme="https://sulangsss.github.io/categories/BlockChain/"/>
    
    
      <category term="BlockChain" scheme="https://sulangsss.github.io/tags/BlockChain/"/>
    
      <category term="Terms" scheme="https://sulangsss.github.io/tags/Terms/"/>
    
      <category term="ZCash" scheme="https://sulangsss.github.io/tags/ZCash/"/>
    
  </entry>
  
  <entry>
    <title>Server Terms</title>
    <link href="https://sulangsss.github.io/2018/12/16/CS/Terms/Server-Terms/"/>
    <id>https://sulangsss.github.io/2018/12/16/CS/Terms/Server-Terms/</id>
    <published>2018-12-15T16:30:18.000Z</published>
    <updated>2018-12-16T05:47:26.792Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CS" scheme="https://sulangsss.github.io/categories/CS/"/>
    
      <category term="Terms" scheme="https://sulangsss.github.io/categories/CS/Terms/"/>
    
    
      <category term="Terms" scheme="https://sulangsss.github.io/tags/Terms/"/>
    
      <category term="CS" scheme="https://sulangsss.github.io/tags/CS/"/>
    
      <category term="Server" scheme="https://sulangsss.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Kernel Architechture</title>
    <link href="https://sulangsss.github.io/2018/12/15/CS/Kernel/Kernel%20Architecture/"/>
    <id>https://sulangsss.github.io/2018/12/15/CS/Kernel/Kernel Architecture/</id>
    <published>2018-12-15T06:55:03.000Z</published>
    <updated>2018-12-15T06:51:13.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote><p><a href="http://gaocegege.com/Blog/csp/unikernel" target="_blank" rel="noopener">http://gaocegege.com/Blog/csp/unikernel</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://gaocegege.com
      
    
    </summary>
    
      <category term="Kernel" scheme="https://sulangsss.github.io/categories/Kernel/"/>
    
    
      <category term="Kernel" scheme="https://sulangsss.github.io/tags/Kernel/"/>
    
      <category term="Architechture" scheme="https://sulangsss.github.io/tags/Architechture/"/>
    
      <category term="MonolithicKernel" scheme="https://sulangsss.github.io/tags/MonolithicKernel/"/>
    
      <category term="MicroKernel" scheme="https://sulangsss.github.io/tags/MicroKernel/"/>
    
      <category term="HybridKernel" scheme="https://sulangsss.github.io/tags/HybridKernel/"/>
    
      <category term="ExoKernel" scheme="https://sulangsss.github.io/tags/ExoKernel/"/>
    
      <category term="UniKernel" scheme="https://sulangsss.github.io/tags/UniKernel/"/>
    
      <category term="LibOS" scheme="https://sulangsss.github.io/tags/LibOS/"/>
    
  </entry>
  
  <entry>
    <title>Unikernel</title>
    <link href="https://sulangsss.github.io/2018/12/15/Docker/Unikernel/Unikernel-Introduction/"/>
    <id>https://sulangsss.github.io/2018/12/15/Docker/Unikernel/Unikernel-Introduction/</id>
    <published>2018-12-15T03:55:03.000Z</published>
    <updated>2018-12-15T07:05:42.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-Are-Unikernels"><a href="#What-Are-Unikernels" class="headerlink" title="What Are Unikernels?"></a>What Are Unikernels?</h3><p>Unikernels are specialised, single-address-space machine images constructed by using library operating systems.</p><p>In other words, unikernels are <strong>small, fast, secure virtual machines that lack operating systems</strong>.</p><p>其最大的卖点就是在，没有用户空间与内核空间之分，只有一个连续的地址空间。这样使得 Unikernel 中只能运行一个应用，而且对于运行的应用而言，没有硬件抽象可言，所有的逻辑，包括应用逻辑和操作硬件的逻辑，都在一个地址空间中。</p><p>Unikernel就是一个单一内存空间的内核镜像，其中只能有一个应用在运行，那这样有啥好呢，为啥值得我放弃Linux而用你这么一个看上去像是阉割版的内核呢？好处就在，小，快，安全。</p><p>Unikernel镜像都很小，由MirageOS实现的一个 DNS server 才 184KB，实现的一个 web server 674 KB，小到恐怖的程度。然后就是快，启动很快。因为镜像都很小，所以起停都在毫秒级别，比传统的kernel要快多了。最后是安全，一般来讲，小的东西相对而言比较安全。Unikernel中没有Shell可用，没有密码文件，没有多余的设备驱动，这使得Unikernel更加安全。</p><hr><h4 id="Unikernel架构"><a href="#Unikernel架构" class="headerlink" title="Unikernel架构"></a>Unikernel架构</h4><img src="/2018/12/15/Docker/Unikernel/Unikernel-Introduction/unikernel-architechture.png"><p>Unikernel在整个服务器的架构中取消了操作系统，应用直接运行在hypervisor或者硬件上。试图抹去现代操作系统带来的一些复杂性。因为“通用”的操作系统（就像任何Linux和Windows的发行版），通常会伴随着带来一些对你的应用来说并不需要的驱动、依赖包、服务、等等。</p><hr><h4 id="Unikernel的开发和测试"><a href="#Unikernel的开发和测试" class="headerlink" title="Unikernel的开发和测试"></a>Unikernel的开发和测试</h4><p>Unikernel 在真正实践中，如何开发与测试是一个值得关注的问题。在开发过程中，开发者可以假定自己在传统的操作系统上进行开发，而所有内核相关的功能，暂且由开发机的操作系统提供。</p><p>而在测试环境中，大部分Unikernel的实现会将应用代码与需要的内核模块构建成Unikernel后，再将其跑在一个传统的操作系统上，利用传统操作系统上的工具来测试Unikernel。以Rumprun为例，它可以通过KVM/QEMU来运行一个 Rumprun Unikernel VM，随后用Host OS上的GDB来对其进行调试，</p><blockquote><p>更多关于调试的信息，可以查看<a href="https://news.ycombinator.com/item?id=10954132" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=10954132</a></p></blockquote><p>在发布阶段，这是 Unikernel最简单的事情了。Unikernel最后的产物就是一个kernel image，可以在Hypervisor，Bare Metal等等各种环境上运行。</p><p>所以可以看到，其中Unikernel在软件过程中与传统方式最大的不同就在于调试与测试。而在发布的阶段，传统的方式可能发布的是一个应用，或者一个容器镜像，而Unikernel则是一个高度定制化的kernel。</p><p>目前的Unikernel项目：MirageOS、HaLVM、ClickOS和Rumprun等等。</p><blockquote><p>更多项目: <a href="http://unikernel.org/projects/" target="_blank" rel="noopener">http://unikernel.org/projects/</a></p></blockquote><hr><h3 id="The-Problem-Our-Fat-Insecure-Clouds"><a href="#The-Problem-Our-Fat-Insecure-Clouds" class="headerlink" title="The Problem: Our Fat, Insecure Clouds"></a>The Problem: Our Fat, Insecure Clouds</h3><p>When cloud computing burst on(突然出现) the scene(场景), there were all sorts of(各种各样的) promises made of a grand future. It was said that our compute farms would magically allocate resources to meet the needs of applications.</p><p>Resources would be automatically optimized to do the maximum work possible with the assets available. And compute clouds would leverage assets both in the datacenter and on the Internet, transparently to the end user.</p><p>Emphasis was placed on developing excellent cloud orchestration(编排,调度) engines that could move applications with agility(灵活,敏捷) throughout the cloud. </p><p>That(cloud orchestration engine) was an entirely appropriate(适合的) focus, as the datacenter in the time before the cloud was both immobile and slow to change. Many system administrators could walk blindfolded(vt.蒙住眼睛) through the aisles(通道) of their equipment racks(货架) and point out what each machine did for what department, stating(vt.说明) exactly what software was installed on each server. The placement of workloads on hardware was frequently laborious(费劲地) and static; changing those workloads was a slow, difficult, and arduous(费力的) task, requiring much verification and testing before even the smallest changes were made on production systems.</p><p>The advent(到来) of cloud orchestration software (OpenStack, CloudStack, openNebula, etc.) altered all that—and many of us were very grateful. The ability of these orchestration systems to adapt and change with business needs turned the IT world on its head. A new world ensued(vi.跟着发生), and the promise of the cloud seemed to be fulfilled.</p><hr><h3 id="Security-Is-a-Growing-Problem"><a href="#Security-Is-a-Growing-Problem" class="headerlink" title="Security Is a Growing Problem"></a>Security Is a Growing Problem</h3><p>However, as the cloud era(时代) dawned(vi.出现), it became evident that a good orchestration engine alone is simply not enough to make a truly effective cloud. </p><p>A quick review of industry headlines(新闻提要) over the past few years yields report after report of security breaches(breach vt.破坏, n.违反,缺口) in some of the most impressive organizations. </p><p>Major retailers(零售商), credit card companies, even federal governments(联邦政府) have reported successful attacks on their infrastructure, including possible loss of sensitive data. For example, in May 2016, the Wall Street Journal ran a story about banks in three different countries that had been recently hacked to the tune of $90 million in losses. A quick review of the graphic representation of major attacks in the past decade will take your breath away. Even the US Pentagon(五角大楼) was reportedly hacked in the summer of (夏天的时候)2011. It is no longer unusual to receive a letter in the mail stating that your credit card is being reissued(vt.重新发行) because credit card data was compromised(vt.危害) by malicious(恶意的) hackers.</p><blockquote><p>to the tune of: 达…之多<br>take your breath away: 令人屏息</p></blockquote><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote><p>official site: <a href="http://unikernel.org/" target="_blank" rel="noopener">http://unikernel.org/</a><br><a href="https://www.oreilly.com/library/view/unikernels/9781492042815/" target="_blank" rel="noopener">https://www.oreilly.com/library/view/unikernels/9781492042815/</a><br><a href="https://www.oreilly.com/library/view/unikernels/9781492042815/ch01.html" target="_blank" rel="noopener">https://www.oreilly.com/library/view/unikernels/9781492042815/ch01.html</a><br><a href="http://dockone.io/article/1379" target="_blank" rel="noopener">http://dockone.io/article/1379</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What-Are-Unikernels&quot;&gt;&lt;a href=&quot;#What-Are-Unikernels&quot; class=&quot;headerlink&quot; title=&quot;What Are Unikernels?&quot;&gt;&lt;/a&gt;What Are Unikernels?&lt;/h3&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="https://sulangsss.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://sulangsss.github.io/tags/Docker/"/>
    
      <category term="Kernel" scheme="https://sulangsss.github.io/tags/Kernel/"/>
    
      <category term="Unikernel" scheme="https://sulangsss.github.io/tags/Unikernel/"/>
    
  </entry>
  
  <entry>
    <title>Rust Unit Testing</title>
    <link href="https://sulangsss.github.io/2018/12/14/Rust/Basic/UnitTesting/"/>
    <id>https://sulangsss.github.io/2018/12/14/Rust/Basic/UnitTesting/</id>
    <published>2018-12-14T11:00:03.000Z</published>
    <updated>2018-12-16T16:12:56.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>add #[test] on the line before <strong>fn</strong>. When you run your tests with the cargo test command, Rust builds a test runner binary that runs the functions annotated with the test attribute and reports on whether each test function passes or fails.</p><p>the#[ignore] attribute to exclude some tests</p><h4 id="Cargo-Command"><a href="#Cargo-Command" class="headerlink" title="Cargo Command"></a>Cargo Command</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">cargo <span class="built_in">test</span> tset_case_name</span><br><span class="line"></span><br><span class="line">cargo <span class="built_in">test</span> prefix_test_name</span><br></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="Case-Hello"><a href="#Case-Hello" class="headerlink" title="Case: Hello"></a>Case: Hello</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">it_works</span></span>() &#123;</span><br><span class="line">        <span class="built_in">assert_eq!</span>(<span class="number">2</span> + <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">running 1 <span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span> tests::it_works ... ok</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out</span><br></pre></td></tr></table></figure><h4 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">exploration</span></span>() &#123;</span><br><span class="line">        <span class="built_in">assert_eq!</span>(<span class="number">2</span> + <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">another</span></span>() &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">"Make this test fail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="should-panic"><a href="#should-panic" class="headerlink" title="should panic"></a>should panic</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">divide_non_zero_result</span></span>(a: <span class="built_in">u32</span>, b: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">"Divide-by-zero error"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">"Divide result is zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a / b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_divide</span></span>() &#123;</span><br><span class="line">        <span class="built_in">assert_eq!</span>(divide_non_zero_result(<span class="number">10</span>, <span class="number">2</span>), <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="meta">#[should_panic]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_any_panic</span></span>() &#123;</span><br><span class="line">        divide_non_zero_result(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="meta">#[should_panic(expected = <span class="meta-string">"Divide result is zero"</span>)]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_specific_panic</span></span>() &#123;</span><br><span class="line">        divide_non_zero_result(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h3&gt;&lt;p&gt;add #[test] on the line before &lt;strong&gt;fn&lt;/strong&gt;. When y
      
    
    </summary>
    
      <category term="Rust" scheme="https://sulangsss.github.io/categories/Rust/"/>
    
      <category term="Basic" scheme="https://sulangsss.github.io/categories/Rust/Basic/"/>
    
    
      <category term="Rust" scheme="https://sulangsss.github.io/tags/Rust/"/>
    
      <category term="Primer" scheme="https://sulangsss.github.io/tags/Primer/"/>
    
      <category term="UnitTesting" scheme="https://sulangsss.github.io/tags/UnitTesting/"/>
    
  </entry>
  
  <entry>
    <title>RAID</title>
    <link href="https://sulangsss.github.io/2018/12/14/CS/Disk/RAID/"/>
    <id>https://sulangsss.github.io/2018/12/14/CS/Disk/RAID/</id>
    <published>2018-12-14T10:21:07.000Z</published>
    <updated>2018-12-14T10:45:23.890Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introducation"><a href="#Introducation" class="headerlink" title="Introducation"></a>Introducation</h3><p><strong>背景</strong></p><p>在单机时代，采用单块磁盘进行数据存储和读写的方式，由于寻址和读写的时间消耗，导致I/O性能非常低，且存储容量还会受到限制。另外，单块磁盘极其容易出现物理故障，经常导致数据的丢失。因此大家就在想，有没有一种办法将多块独立的磁盘结合在一起组成一个技术方案，来提高数据的可靠性和I/O性能呢。在这种情况下，RAID技术就应运而生了。</p><p><strong>What’s RAID?</strong></p><p>RAID （ Redundant Array of Independent Disks ）即独立磁盘冗余阵列，简称为「磁盘阵列」，其实就是用多个独立的磁盘组成在一起形成一个大的磁盘系统，从而实现比单块磁盘更好的存储性能和更高的可靠性。</p><h3 id="RAID-Type"><a href="#RAID-Type" class="headerlink" title="RAID Type"></a>RAID Type</h3><ul><li>RAID0</li><li>RAID1</li><li>RAID5</li><li>RAID6</li><li>RAID7</li><li>RAID10</li></ul><p>磁盘阵列其实也分为软阵列 (Software Raid)和硬阵列 (Hardware Raid)，其中Software Raid只能实现RAID0和RAID1</p><hr><h4 id="RAID0"><a href="#RAID0" class="headerlink" title="RAID0"></a>RAID0</h4><p>RAID0 是一种非常简单的的方式，它将多块磁盘组合在一起形成一个大容量的存储。当我们要写数据的时候，会将数据分为N份，以独立的方式实现N块磁盘的读写，那么这N份数据会同时并发的写到磁盘中，因此执行性能非常的高。</p><p>RAID0的读写性能理论上是单块磁盘的N倍（仅限理论，因为实际中磁盘的寻址时间也是性能占用的大头），但RAID0的问题是，它并不提供数据校验或冗余备份，因此一旦某块磁盘损坏了，数据就直接丢失，无法恢复了。因此RAID0就不可能用于高要求的业务中，但可以用在对可靠性要求不高，对读写性能要求高的场景中。</p><hr><h4 id="RAID1"><a href="#RAID1" class="headerlink" title="RAID1"></a>RAID1</h4><p>RAID1 是磁盘阵列中单位成本最高的一种方式。因为它的原理是在往磁盘写数据的时候，将同一份数据无差别的写两份到磁盘，分别写到工作磁盘和镜像磁盘，那么它的实际空间使用率只有50%了，两块磁盘当做一块用，这是一种比较昂贵的方案。</p><p>RAID1其实与RAID0效果刚好相反。RAID1 这种写双份的做法，就给数据做了一个冗余备份。这样的话，任何一块磁盘损坏了，都可以再基于另外一块磁盘去恢复数据，数据的可靠性非常强，但性能就没那么好了。</p><p>RAID5的方式可以说是对RAID3进行了改进。</p><p>RAID5模式中，不再需要用单独的磁盘写校验码了。它把校验码信息分布到各个磁盘上。例如，总共有N块磁盘，那么会将要写入的数据分成N份，并发的写入到N块磁盘中，同时还将数据的校验码信息也写入到这N块磁盘中（数据与对应的校验码信息必须得分开存储在不同的磁盘上）。一旦某一块磁盘损坏了，就可以用剩下的数据和对应的奇偶校验码信息去恢复损坏的数据。</p><hr><h4 id="RAID5"><a href="#RAID5" class="headerlink" title="RAID5"></a>RAID5</h4><p>在说RAID5前，我们先了解一下RAID3，因为RAID5是在RAID3基础上进行改进的。</p><p>RAID3的方式是：将数据按照RAID0的形式，分成多份同时写入多块磁盘，但是还会另外再留出一块磁盘用于写「奇偶校验码」。例如总共有N块磁盘，那么就会让其中的N-1块用来并发的写数据，第N块磁盘用记录校验码数据。一旦某一块磁盘坏掉了，就可以利用其它的N-1块磁盘去恢复数据。</p><p>但是由于第N块磁盘是校验码磁盘，因此有任何数据的写入都会要去更新这块磁盘，导致这块磁盘的读写是最频繁的，也就非常的容易损坏。</p><p>RAID5的方式，最少需要三块磁盘来组建磁盘阵列，允许最多同时坏一块磁盘。如果有两块磁盘同时损坏了，那数据就无法恢复了。</p><hr><h4 id="RAID6"><a href="#RAID6" class="headerlink" title="RAID6"></a>RAID6</h4><p>RAID6在RAID5的基础上再次改进，引入了<strong>双重校验</strong>的概念。</p><p>RAID6除了每块磁盘上都有同级数据XOR校验区以外，还有针对每个数据块的XOR校验区，这样的话，相当于每个数据块有两个校验保护措施，因此数据的冗余性更高了。但是RAID6的这种设计也带来了很高的复杂度，虽然数据冗余性好，读取的效率也比较高，但是写数据的性能就很差。因此RAID6在实际环境中应用的比较少。</p><hr><h4 id="RAID10"><a href="#RAID10" class="headerlink" title="RAID10"></a>RAID10</h4><p>RAID10兼备了RAID1和RAID0的有优点。首先基于RAID1模式将磁盘分为2份，当要写入数据的时候，将所有的数据在两份磁盘上同时写入，相当于写了双份数据，起到了数据保障的作用。且在每一份磁盘上又会基于RAID0技术讲数据分为N份并发的读写，这样也保障了数据的效率。</p><p>但也可以看出RAID10模式是有一半的磁盘空间用于存储冗余数据的，浪费的很严重，因此用的也不是很多。</p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/51170719" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/51170719</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introducation&quot;&gt;&lt;a href=&quot;#Introducation&quot; class=&quot;headerlink&quot; title=&quot;Introducation&quot;&gt;&lt;/a&gt;Introducation&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Disk" scheme="https://sulangsss.github.io/categories/Disk/"/>
    
    
      <category term="Disk" scheme="https://sulangsss.github.io/tags/Disk/"/>
    
      <category term="RAID" scheme="https://sulangsss.github.io/tags/RAID/"/>
    
  </entry>
  
  <entry>
    <title>Junit Configuration</title>
    <link href="https://sulangsss.github.io/2018/12/14/Java/Junit/JunitConfiguration/"/>
    <id>https://sulangsss.github.io/2018/12/14/Java/Junit/JunitConfiguration/</id>
    <published>2018-12-14T05:17:22.000Z</published>
    <updated>2018-12-14T05:17:27.348Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Junit-5"><a href="#Junit-5" class="headerlink" title="Junit 5"></a>Junit 5</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Junit-5&quot;&gt;&lt;a href=&quot;#Junit-5&quot; class=&quot;headerlink&quot; title=&quot;Junit 5&quot;&gt;&lt;/a&gt;Junit 5&lt;/h3&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Junit" scheme="https://sulangsss.github.io/categories/Java/Junit/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="Junit" scheme="https://sulangsss.github.io/tags/Junit/"/>
    
      <category term="Configuration" scheme="https://sulangsss.github.io/tags/Configuration/"/>
    
  </entry>
  
  <entry>
    <title>Maven Common Configuration</title>
    <link href="https://sulangsss.github.io/2018/12/14/Java/Maven/CommonConfiguration/"/>
    <id>https://sulangsss.github.io/2018/12/14/Java/Maven/CommonConfiguration/</id>
    <published>2018-12-14T04:15:22.000Z</published>
    <updated>2018-12-14T05:14:30.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><h4 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><h4 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看maven安装目录</span></span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p>添加Aliyun Repository，sudo vim /usr/local/Cellar/maven/3.5.4/libexec/conf/settings.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dependencies&quot;&gt;&lt;a href=&quot;#Dependencies&quot; class=&quot;headerlink&quot; title=&quot;Dependencies&quot;&gt;&lt;/a&gt;Dependencies&lt;/h3&gt;&lt;h4 id=&quot;Exclude&quot;&gt;&lt;a href=&quot;#Exclud
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Maven" scheme="https://sulangsss.github.io/categories/Java/Maven/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="Configuration" scheme="https://sulangsss.github.io/tags/Configuration/"/>
    
      <category term="Maven" scheme="https://sulangsss.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven Error</title>
    <link href="https://sulangsss.github.io/2018/12/14/Java/Maven/MavenError/"/>
    <id>https://sulangsss.github.io/2018/12/14/Java/Maven/MavenError/</id>
    <published>2018-12-14T04:01:22.000Z</published>
    <updated>2018-12-14T03:21:25.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="was-cached-in-the-local-repository-resolution-will-not-be-reattempted-until-the-update-interval-of-nexus-has-elapsed-or-updates-are-forced"><a href="#was-cached-in-the-local-repository-resolution-will-not-be-reattempted-until-the-update-interval-of-nexus-has-elapsed-or-updates-are-forced" class="headerlink" title="was cached in the local repository, resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced"></a>was cached in the local repository, resolution will not be reattempted until the update interval of nexus has elapsed or updates are forced</h3><p>Solution: 删除本地jar包，rebuild</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -U clean install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;was-cached-in-the-local-repository-resolution-will-not-be-reattempted-until-the-update-interval-of-nexus-has-elapsed-or-updates-are-
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Maven" scheme="https://sulangsss.github.io/categories/Java/Maven/"/>
    
    
      <category term="Error" scheme="https://sulangsss.github.io/tags/Error/"/>
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://sulangsss.github.io/tags/Maven/"/>
    
  </entry>
  
</feed>
