<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sulang blog</title>
  
  <subtitle>python java android django web</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sulangsss.github.io/"/>
  <updated>2018-11-09T07:05:08.967Z</updated>
  <id>https://sulangsss.github.io/</id>
  
  <author>
    <name>sulang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kuberntes PV PVC</title>
    <link href="https://sulangsss.github.io/2018/11/09/Kubenetes/PV-And-PVC/"/>
    <id>https://sulangsss.github.io/2018/11/09/Kubenetes/PV-And-PVC/</id>
    <published>2018-11-09T06:01:22.000Z</published>
    <updated>2018-11-09T07:05:08.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-volumeclaim</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 200Gi</span><br></pre></td></tr></table></figure><h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mysql</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - image: mysql:5.6</span><br><span class="line">          name: mysql</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 3306</span><br><span class="line">              name: mysql</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: mysql-persistent-storage</span><br><span class="line">              mountPath: /var/lib/mysql</span><br><span class="line">      volumes:</span><br><span class="line">        - name: mysql-persistent-storage</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: mysql-volumeclaim</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PVC&quot;&gt;&lt;a href=&quot;#PVC&quot; class=&quot;headerlink&quot; title=&quot;PVC&quot;&gt;&lt;/a&gt;PVC&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="Kuberntes" scheme="https://sulangsss.github.io/categories/Kuberntes/"/>
    
    
      <category term="Kuberntes" scheme="https://sulangsss.github.io/tags/Kuberntes/"/>
    
      <category term="PV" scheme="https://sulangsss.github.io/tags/PV/"/>
    
      <category term="PVC" scheme="https://sulangsss.github.io/tags/PVC/"/>
    
  </entry>
  
  <entry>
    <title>certbot docker Let&#39;s Encrypt</title>
    <link href="https://sulangsss.github.io/2018/11/09/Nginx/certbot/"/>
    <id>https://sulangsss.github.io/2018/11/09/Nginx/certbot/</id>
    <published>2018-11-09T05:33:06.000Z</published>
    <updated>2018-11-09T06:09:27.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 80:80 -p 443:443 \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>)/letsencrypt:/etc/letsencrypt \</span><br><span class="line">    quay.io/letsencrypt/letsencrypt auth</span><br></pre></td></tr></table></figure><p>运行成功后，如下提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">How would you like to authenticate with the ACME CA?</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">1: Spin up a temporary webserver (standalone)</span><br><span class="line">2: Place files <span class="keyword">in</span> webroot directory (webroot)</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Select the appropriate number [1-2] <span class="keyword">then</span> [enter] (press <span class="string">'c'</span> to cancel):</span><br></pre></td></tr></table></figure><p>选择1，然后输入Email地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plugins selected: Authenticator standalone, Installer None</span><br><span class="line">Enter email address (used <span class="keyword">for</span> urgent renewal and security notices) (Enter <span class="string">'c'</span> to</span><br><span class="line">cancel):</span><br></pre></td></tr></table></figure><p>同意协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please <span class="built_in">read</span> the Terms of Service at</span><br><span class="line">https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must</span><br><span class="line">agree <span class="keyword">in</span> order to register with the ACME server at</span><br><span class="line">https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure><p>最后接着输入你的domain，然后生成证书</p><h3 id="One-Step"><a href="#One-Step" class="headerlink" title="One Step"></a>One Step</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -p 80:80 -p 443:443 \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>)/letsencrypt:/etc/letsencrypt \</span><br><span class="line">    quay.io/letsencrypt/letsencrypt auth \</span><br><span class="line">    --standalone -m someone@email.com --agree-tos \</span><br><span class="line">    -d your.domain1.com -d your.domain2.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Step&quot;&gt;&lt;a href=&quot;#Step&quot; class=&quot;headerlink&quot; title=&quot;Step&quot;&gt;&lt;/a&gt;Step&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="Nginx" scheme="https://sulangsss.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://sulangsss.github.io/tags/Nginx/"/>
    
      <category term="certbot" scheme="https://sulangsss.github.io/tags/certbot/"/>
    
      <category term="HTTPS" scheme="https://sulangsss.github.io/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Api Gateway Error</title>
    <link href="https://sulangsss.github.io/2018/11/08/SpringBoot/API-Gateway/Error/"/>
    <id>https://sulangsss.github.io/2018/11/08/SpringBoot/API-Gateway/Error/</id>
    <published>2018-11-08T15:00:06.000Z</published>
    <updated>2018-11-09T07:13:01.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Unable-to-start-reactive-web"><a href="#Unable-to-start-reactive-web" class="headerlink" title="Unable to start reactive web"></a>Unable to start reactive web</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Unable-to-start-reactive-web&quot;&gt;&lt;a href=&quot;#Unable-to-start-reactive-web&quot; class=&quot;headerlink&quot; title=&quot;Unable to start reactive web&quot;&gt;&lt;/a&gt;Un
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://sulangsss.github.io/categories/SpringBoot/"/>
    
      <category term="ApiGateway" scheme="https://sulangsss.github.io/categories/SpringBoot/ApiGateway/"/>
    
    
      <category term="Error" scheme="https://sulangsss.github.io/tags/Error/"/>
    
      <category term="SpringBoot" scheme="https://sulangsss.github.io/tags/SpringBoot/"/>
    
      <category term="ApiGateway" scheme="https://sulangsss.github.io/tags/ApiGateway/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Api Gateway 跨域问题</title>
    <link href="https://sulangsss.github.io/2018/11/08/SpringBoot/API-Gateway/CORS/"/>
    <id>https://sulangsss.github.io/2018/11/08/SpringBoot/API-Gateway/CORS/</id>
    <published>2018-11-08T15:00:06.000Z</published>
    <updated>2018-11-09T07:12:57.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">fun <span class="title">allowCORS</span><span class="params">()</span>: WebFilter </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WebFilter &#123; webExchange, chains -&gt;</span><br><span class="line">            val request = webExchange.request</span><br><span class="line">            val requestHeaders = request.headers</span><br><span class="line">            val response = webExchange.response</span><br><span class="line">            val respHeaders = response.headers</span><br><span class="line"></span><br><span class="line">            respHeaders.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, <span class="string">"*"</span>)</span><br><span class="line">            respHeaders.add(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, <span class="string">"*"</span>)</span><br><span class="line">            respHeaders.add(HttpHeaders.ACCESS_CONTROL_MAX_AGE, MAX_AGE)</span><br><span class="line">            respHeaders.addAll(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, requestHeaders.accessControlRequestHeaders)</span><br><span class="line">            respHeaders.add(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS, <span class="string">"*"</span>)</span><br><span class="line">            respHeaders.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, <span class="string">"true"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (request.method == HttpMethod.OPTIONS) &#123;</span><br><span class="line">                response.statusCode = HttpStatus.OK</span><br><span class="line">                Mono.empty()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                chains.filter(webExchange)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        <span class="keyword">const</span> val MAX_AGE = <span class="string">"18000L"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h3><blockquote><p><a href="http://springcloud.cn/view/343" target="_blank" rel="noopener">http://springcloud.cn/view/343</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;h3 id=&quot;Kotlin&quot;&gt;&lt;a href=&quot;#Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Kotli
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://sulangsss.github.io/categories/SpringBoot/"/>
    
      <category term="ApiGateway" scheme="https://sulangsss.github.io/categories/SpringBoot/ApiGateway/"/>
    
    
      <category term="CORS" scheme="https://sulangsss.github.io/tags/CORS/"/>
    
      <category term="SpringBoot" scheme="https://sulangsss.github.io/tags/SpringBoot/"/>
    
      <category term="ApiGateway" scheme="https://sulangsss.github.io/tags/ApiGateway/"/>
    
  </entry>
  
  <entry>
    <title>Eureka Conf</title>
    <link href="https://sulangsss.github.io/2018/11/08/SpringBoot/Eureka/conf/"/>
    <id>https://sulangsss.github.io/2018/11/08/SpringBoot/Eureka/conf/</id>
    <published>2018-11-08T04:13:06.000Z</published>
    <updated>2018-11-08T04:16:52.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h3><blockquote><p><a href="https://yq.aliyun.com/articles/138261" target="_blank" rel="noopener">https://yq.aliyun.com/articles/138261</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Refer&quot;&gt;&lt;a href=&quot;#Refer&quot; class=&quot;headerlink&quot; title=&quot;Refer&quot;&gt;&lt;/a&gt;Refer&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/13826
      
    
    </summary>
    
      <category term="Server" scheme="https://sulangsss.github.io/categories/Server/"/>
    
    
      <category term="Server" scheme="https://sulangsss.github.io/tags/Server/"/>
    
      <category term="Conf" scheme="https://sulangsss.github.io/tags/Conf/"/>
    
      <category term="Eureka" scheme="https://sulangsss.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Attribute</title>
    <link href="https://sulangsss.github.io/2018/11/07/Kubenetes/Deployment-Attribute/"/>
    <id>https://sulangsss.github.io/2018/11/07/Kubenetes/Deployment-Attribute/</id>
    <published>2018-11-07T02:13:06.000Z</published>
    <updated>2018-11-09T07:14:45.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">command</span>-demo</span><br><span class="line">  labels:</span><br><span class="line">    purpose: demonstrate-command</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: <span class="built_in">command</span>-demo-container</span><br><span class="line">    image: debian</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">"printenv"</span>]</span><br><span class="line">    args: [<span class="string">"HOSTNAME"</span>, <span class="string">"KUBERNETES_PORT"</span>]</span><br><span class="line">  restartPolicy: OnFailure</span><br></pre></td></tr></table></figure><h3 id="Access-Modes"><a href="#Access-Modes" class="headerlink" title="Access Modes"></a>Access Modes</h3><ul><li>ReadWriteOnce – the volume can be mounted as read-write by a single node</li><li>ReadOnlyMany – the volume can be mounted read-only by many nodes</li><li>ReadWriteMany – the volume can be mounted as read-write by many nodes</li></ul><p>In the CLI, the access modes are abbreviated to:</p><ul><li>RWO - ReadWriteOnce</li><li>ROX - ReadOnlyMany</li><li>RWX - ReadWriteMany</li></ul><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><h3 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h3><p><strong>应用场景</strong></p><ul><li>Stable, unique network identifiers.</li><li>Stable, persistent storage.</li><li>Ordered, graceful deployment and scaling.</li><li>Ordered, automated rolling updates.</li></ul><h4 id="updateStrategy"><a href="#updateStrategy" class="headerlink" title="updateStrategy"></a>updateStrategy</h4><p>spec.updateStrategy.type</p><ul><li>OnDelete：不会自动更新StatefulSet中的Pod，用户必须手动删除Pods以使控制器创建新的Pod。</li><li>RollingUpdate：删除并重新创建StatefulSet中的每个Pod。它将以与Pod终止相同的顺序进行（从最大的序数到最小的顺序）来更新每个Pod。</li></ul><p>spe.updateStrategy.rollingUpdate.partition 金丝雀策略</p><h4 id="volumeClaimTemplates"><a href="#volumeClaimTemplates" class="headerlink" title="volumeClaimTemplates"></a>volumeClaimTemplates</h4><ul><li>persistentVolume：用来向真正的存储服务器申请真正的存储资源的一个object，至于这个存储资源谁来用，那就是接下来说的pvc的职责所在。</li><li>persistentVolumeClaim：用来关联pv和pod的一个桥梁。</li></ul><p>通过volumeClaimTemplates关联创建PV，volumeMounts使用PV</p><h3 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h3><blockquote><p><a href="http://docs.kubernetes.org.cn/" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Command&quot;&gt;&lt;a href=&quot;#Command&quot; class=&quot;headerlink&quot; title=&quot;Command&quot;&gt;&lt;/a&gt;Command&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="Kubernetes" scheme="https://sulangsss.github.io/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://sulangsss.github.io/tags/Kubernetes/"/>
    
      <category term="Attribute" scheme="https://sulangsss.github.io/tags/Attribute/"/>
    
  </entry>
  
  <entry>
    <title>HTTP Hijack</title>
    <link href="https://sulangsss.github.io/2018/11/06/CS/Network/HTTP-Hijack/"/>
    <id>https://sulangsss.github.io/2018/11/06/CS/Network/HTTP-Hijack/</id>
    <published>2018-11-06T05:28:19.000Z</published>
    <updated>2018-11-11T07:01:55.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>而HTTP劫持很容易解决，那就是加上SSL证书，网站链接全部内容加密，这样“检查站：墙”就无法解密数据分析关键词了。但是这不是绝对能解决这个问题的，如果你的网站只是误杀或者违规擦边球，那还好，如果是大型网站，就会特殊对待了。</p><p>HTTPS在建立加密连接的时候，需要一次握手，也就是达成链接协议建立加密连接，但是这次握手是明文的（建立加密链接首先就是链接双方信任，比如网站的SSL证书是自己签的，或者SSL证书到期或伪造的，在访问这个网站的时候浏览器就会进行提示，表示此网站不安全啥的。</p><p>握手是明文的就意味着，如果你的域名被重点关注，即使你加上了SSL证书，也会在首次握手的时候，被关键词匹配然后掐断链接。还有一种方式，就是域名备案，使用国内服务器。这样用户在访问你的网站时，根本不需要经过墙，自然也没有了拦截。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h3&gt;&lt;p&gt;而HTTP劫持很容易解决，那就是加上SSL证书，网站链接全部内容加密，这样“检查站：墙”就无
      
    
    </summary>
    
      <category term="CS" scheme="https://sulangsss.github.io/categories/CS/"/>
    
      <category term="Network" scheme="https://sulangsss.github.io/categories/CS/Network/"/>
    
    
      <category term="CS" scheme="https://sulangsss.github.io/tags/CS/"/>
    
      <category term="Network" scheme="https://sulangsss.github.io/tags/Network/"/>
    
      <category term="HTTP" scheme="https://sulangsss.github.io/tags/HTTP/"/>
    
      <category term="Hijack" scheme="https://sulangsss.github.io/tags/Hijack/"/>
    
  </entry>
  
  <entry>
    <title>医生的修炼</title>
    <link href="https://sulangsss.github.io/2018/11/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%81%8C%E4%B8%9A/%E5%8C%BB%E7%94%9F%E7%9A%84%E4%BF%AE%E7%82%BC/"/>
    <id>https://sulangsss.github.io/2018/11/01/读书笔记/职业/医生的修炼/</id>
    <published>2018-11-01T05:38:18.000Z</published>
    <updated>2018-11-01T05:44:39.128Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="职业" scheme="https://sulangsss.github.io/categories/%E8%81%8C%E4%B8%9A/"/>
    
    
      <category term="职业" scheme="https://sulangsss.github.io/tags/%E8%81%8C%E4%B8%9A/"/>
    
      <category term="医生的修炼" scheme="https://sulangsss.github.io/tags/%E5%8C%BB%E7%94%9F%E7%9A%84%E4%BF%AE%E7%82%BC/"/>
    
  </entry>
  
  <entry>
    <title>LLVM</title>
    <link href="https://sulangsss.github.io/2018/11/01/CS/Compiler/LLVM/"/>
    <id>https://sulangsss.github.io/2018/11/01/CS/Compiler/LLVM/</id>
    <published>2018-11-01T02:31:19.000Z</published>
    <updated>2018-11-06T05:21:27.594Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What’s-LLVM"><a href="#What’s-LLVM" class="headerlink" title="What’s LLVM"></a>What’s LLVM</h3><p>LLVM is Low Level Virtual Machine.</p><p>LLVM可以被看作是一系列的编译器和工具链技术的集合，而且它们是模块化并且是可重用的。</p><p>原话是：<strong>The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.</strong></p><p><strong>特性</strong></p><ul><li>LLVM的“中间表示”（IR）是一项大创新。LLVM的程序表示方法真的“可读”（如果你会读汇编）。虽然看上去这没什么要紧，但要知道，其他编译器的中间表示大多是种内存中的复杂数据结构，以至于很难写出来，这让其他编译器既难懂又难以实现。</li><li>然而LLVM并非如此。其架构远比其他编译器要模块化得多。这种优点可能部分来自于它的最初实现者。</li><li>尽管LLVM给我们这些狂热的学术黑客提供了一种研究工具的选择，它还是一款有大公司做后台的工业级编译器。这意味着你不需要去在“强大的编译器”和“可玩的编译器”之间做妥协——不像你在Java世界中必须在HotSpot和Jikes之间权衡那样。</li></ul><p><strong>特别注意：LLVM不是只用来实现编译优化的！</strong></p><h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><p>LLVM架构的主要组成部分如下（事实上也是所有现代编译器架构）：</p><p><strong>前端 -&gt; 流程（Pass) -&gt; 后端</strong></p><img src="/2018/11/01/CS/Compiler/LLVM/components.png"><ul><li><p>前端获取你的源代码然后将它转变为某种中间表示。这种翻译简化了编译器其他部分的工作，这样它们就不需要面对比如C++源码的所有复杂性了。作为一个豪迈人，你很可能不想再做这部分工作；可以不加改动地使用Clang来完成。</p></li><li><p>“流程”将程序在中间表示之间互相变换。一般情况下，流程也用来优化代码：流程输出的（中间表示）程序和它输入的（中间表示）程序相比在功能上完全相同，只是在性能上得到改进。这部分通常是给你发挥的地方。你的研究工具可以通过观察和修改编译过程流中的IR来完成任务。</p></li><li><p>后端部分可以生成实际运行的机器码。你几乎肯定不想动这部分了。</p></li></ul><p>虽然当今大多数编译器都使用了这种架构，但是LLVM有一点值得注意而与众不同：整个过程中，程序都使用了同一种中间表示。在其他编译器中，可能每一个流程产出的代码都有一种独特的格式。LLVM在这一点上对hackers大为有利。我们不需要担心我们的改动该插在哪个位置，只要放在前后端之间某个地方就足够了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What’s-LLVM&quot;&gt;&lt;a href=&quot;#What’s-LLVM&quot; class=&quot;headerlink&quot; title=&quot;What’s LLVM&quot;&gt;&lt;/a&gt;What’s LLVM&lt;/h3&gt;&lt;p&gt;LLVM is Low Level Virtual Machine.
      
    
    </summary>
    
      <category term="CS" scheme="https://sulangsss.github.io/categories/CS/"/>
    
    
      <category term="CS" scheme="https://sulangsss.github.io/tags/CS/"/>
    
      <category term="LLVM" scheme="https://sulangsss.github.io/tags/LLVM/"/>
    
  </entry>
  
  <entry>
    <title>Redis Replication</title>
    <link href="https://sulangsss.github.io/2018/10/29/Database/Redis/Master-Slave/"/>
    <id>https://sulangsss.github.io/2018/10/29/Database/Redis/Master-Slave/</id>
    <published>2018-10-29T15:31:19.000Z</published>
    <updated>2018-10-30T02:59:12.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Replication-演进"><a href="#Replication-演进" class="headerlink" title="Replication 演进"></a>Replication 演进</h3><h4 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h4><ol><li>复制初始化阶段</li></ol><blockquote><p>当执行完slaveof masterip port 命令时候，从库根据指明的master节点ip和port向主库发起socket连接，主库收到socket连接之后将连接信息保存，此时连接建立；</p></blockquote><blockquote><p>当socket连接建立完成以后，从库向主库发送ping命令，以确认主库是否可用，此时的结果返回如果是PONG则代表主库可以用，否则可能出现超时或者主库此时在处理其他任务阻塞那么此时从库将断开socket连接，然后进行重试；</p></blockquote><blockquote><p>如果主库连接设置了密码，则从库需要设置masterauth参数，此时从库会发送auth命令，命令格式为“auth + 密码”进行密码验证，其中密码为masterauth参数配置的密码，需要注意的是如果主库设置了密码验证，从库未配置masterauth参数则报错，socket连接断开。</p></blockquote><blockquote><p>当身份验证完成以后，从节点发送自己的监听端口，主库保存其端口信息，此时进入下一个阶段：数据同步阶段。</p></blockquote><hr><ol start="2"><li>数据同步阶段</li></ol><blockquote><p>主库和从库都确认对方信息以后，便可开始数据同步，此时从库向主库发送psync命令(注意，redis4.0版本对2.8版本的psync做了优化)，主库收到该命令后判断是进行增量复制还是全量复制，然后根据策略进行数据的同步，当主库有新的写操作时候，此时进入复制第三阶段：命令传播阶段。</p></blockquote><blockquote><p>redis采用量乐观复制策略，容忍在一定时间内主从数据内容是不同的，但是两者的数据最终会同步。</p></blockquote><hr><ol start="3"><li>命令传播阶段</li></ol><blockquote><p>当数据同步完成以后，在此后的时间里主从维护着心跳检查来确认对方是否在线，每隔一段时间（默认10秒，通过repl-ping-slave-period参数指定）主节点向从节点发送PING命令判断从节点是否在线，而从节点每秒1次向主节点发送REPLCONF ACK命令，命令格式为：REPLCONF ACK {offset}，其中offset指从节点保存的复制偏移量。作用一是汇报自己复制偏移量，主节点会对比复制偏移量向从节点发送未同步的命令，作用二在于判断主节点是否在线，从库接送命令并执行，最终实现与主库数据相同。</p></blockquote><hr><h4 id="复制演进"><a href="#复制演进" class="headerlink" title="复制演进"></a>复制演进</h4><p>sync -&gt; psync1 -&gt; psync2</p><ol><li>redis版本 &lt;= 2.6 &lt; 2.8，复制采用sync命令，无论是第一次主从复制还是断线重连进行复制都采用全量复制；</li><li>2.8 &lt;= redis版本 &lt; 4.0，复制采用psync，从redis2.8开始，redis复制从sync过渡到psync，这一特性主要添加了redis在断线重新时候可使用<strong>部分复制</strong>；</li><li>redis版本 &gt;= 4.0，也采用psync，相比与2.8版本的psync优化了<strong>增量复制</strong>，这里我们称为psync2，2.8版本的psync称为psync1。</li></ol><p><strong>sync</strong></p><p>在redis2.6以及以前的版本，复制采用sync命令，当一个从库启动后，会向主库发送sync命令，主库收到sync命令后执行bgsave后台保存RDB快照，同时将保存快照的将快照保存期间接受的写命令保存到缓冲队列。</p><p>当快照完成以后，主库将快照文件已经缓存的所有命令发送给从库，从库接受到快照文件并载入，再将执行主库发送的命令，也就是上面我们介绍的复制初始化阶段和数据同步阶段，其后就是命令增量同步，最终主库与从库保持数据一直。</p><p>当从库在某些情况断线重连（如从库重启、由于网络原因主从连接超时），重复上述过程，进行数据同步。由此可见，redis2.6版本以及2.6以前复制过程全部采用全量复制。</p><p>sync虽然解决了数据同步问题，但是在数据量比较大情况下，从库断线从来依然采用全量复制机制，无论是从数据恢复、宽带占用来说，sync所带来的问题还是很多的。于是redis从2.8开始，引入新的命令psync。</p><p><strong>psync1</strong></p><p>在redis2.8版本，redis引入psync命令来进行主从的数据同步，这里我们称该命令为psync1。</p><p>psync1实现依赖以下三个关键点：</p><ul><li>offset（复制偏移量）</li></ul><blockquote><p>主库和从库分别各自维护一个复制偏移量（可以使用info replication查看），用于标识自己复制的情况，在主库中代表主节点向从节点传递的字节数，在从库中代表从库同步的字节数。每当主库向从节点发送N个字节数据时，主节点的offset增加N，从库每收到主节点传来的N个字节数据时，从库的offset增加N。因此offset总是不断增大，这也是判断主从数据是否同步的标志，若主从的offset相同则表示数据同步量，不通则表示数据不同步。以下图示分别代表某个时刻两个主从的同步情况</p></blockquote><ul><li>replication backlog buffer（复制积压缓冲区）</li></ul><blockquote><p>复制积压缓冲区是一个固定长度的FIFO队列，大小由配置参数repl-backlog-size指定，默认大小1MB。需要注意的是该缓冲区由master维护并且有且只有一个，所有slave共享此缓冲区，其作用在于备份最近主库发送给从库的数据。</p><p>在主从命令传播阶段，主节点除了将写命令发送给从节点外，还会发送一份到复制积压缓冲区，作为写命令的备份。除了存储最近的写命令，复制积压缓冲区中还存储了每个字节相应的复制偏移量，由于复制积压缓冲区固定大小先进先出的队列，所以它总是保存的是最近redis执行的命令。</p></blockquote><ul><li>run_id(服务器运行的唯一ID)</li></ul><blockquote><p>每个redis实例在启动时候，都会随机生成一个长度为40的唯一字符串来标识当前运行的redis节点，查看此id可通过命令info server查看。</p></blockquote><blockquote><p>当主从复制在初次复制时，主节点将自己的runid发送给从节点，从节点将这个runid保存起来,当断线重连时，从节点会将这个runid发送给主节点。主节点根据runid判断能否进行部分复制：</p></blockquote><ul><li>如果从节点保存的runid与主节点现在的runid相同，说明主从节点之前同步过，主节点会更具offset偏移量之后的数据判断是否执行部分复制，如果offset偏移量之后的数据仍然都在复制积压缓冲区里，则执行部分复制，否则执行全量复制；</li><li>如果从节点保存的runid与主节点现在的runid不同，说明从节点在断线前同步的redis节点并不是当前的主节点，只能进行全量复制;</li></ul><p><strong>psync2</strong></p><blockquote><p>redis4.0新版本除了增加混合持久化，还优化了psync（以下称psync2）并实现即使redis实例重启的情况下也能实现部分同步，下面主要介绍psync2实现过程。psync2在psync1基础上新增两个复制id</p></blockquote><blockquote><ul><li>master_replid1: 复制id1(后文简称：replid1)，一个长度为41个字节(40个随机串+’0’)的字符串，每个redis实例都有，和runid没有直接关联，但和runid生成规则相同。当实例变为从实例后，自己的replid1会被主实例的replid1覆盖。</li></ul></blockquote><blockquote><ul><li>master_replid2：复制id2(后文简称:replid2)，默认初始化为全0，用于存储上次主实例的replid1。</li></ul></blockquote><blockquote><p>在4.0之前的版本，redis复制信息完全丢失，所以每个实例重启后只能进行全量复制，到了4.0版本，任然可以使用部分同步，其实现过程：</p></blockquote><blockquote><ul><li>第一步：存储复制信息</li></ul></blockquote><blockquote><p>redis在关闭时，通过shutdown save,都会调用rdbSaveInfoAuxFields函数，把当前实例的repl-id和repl-offset保存到RDB文件中,当前的RDB存储的数据内容和复制信息是一致性的可通过redis-check-rdb命令查看</p></blockquote><blockquote><ul><li>第二步：重启后加载RDB文件中的复制信息</li></ul></blockquote><blockquote><p>redis加载RDB文件，会专门处理文件中辅助字段(AUX fields）信息，把其中repl_id和repl_offset加载到实例中，分别赋给master_replid和master_repl_offset两个变量值，特别注意当从库开启了AOF持久化，redis加载顺序发生变化优先加载AOF文件，但是由于aof文件中没有复制信息，所以导致重启后从实例依旧使用全量复制！</p></blockquote><blockquote><ul><li>第三步：向主库上报复制信息，判断是否进行部分同步</li></ul></blockquote><blockquote><p>从实例向主库上报master_replid和master_repl_offset+1；从实例同时满足以下两条件，就可以部分重新同步，否则执行全量同步：</p></blockquote><blockquote><blockquote><ul><li>从实例上报master_replid串，与主实例的master_replid1或replid2有一个相等，用于判断主从未发生改变；</li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>从实例上报的master_repl_offset+1字节，还存在于主实例的复制积压缓冲区中，用于判断从库丢失部分是否在复制缓冲区中；</li></ul></blockquote></blockquote><blockquote><p>psync2除了解决redis重启使用部分同步外，还为解决在主库故障时候从库切换为主库时候使用部分同步机制。redis从库默认开启复制积压缓冲区功能，以便从库故障切换变化master后，其他落后该从库可以从缓冲区中获取缺少的命令。该过程的实现通过两组replid、offset替换原来的master runid和offset变量实现</p></blockquote><blockquote><blockquote><ul><li>第一组：master_replid和master_repl_offset：如果redis是主实例，则表示为自己的replid和复制偏移量； 如果redis是从实例，则表示为自己主实例的replid1和同步主实例的复制偏移量。</li><li>第二组：master_replid2和second_repl_offset：无论主从，都表示自己上次主实例repid1和复制偏移量；用于兄弟实例或级联复制，主库故障切换psync。</li></ul></blockquote></blockquote><blockquote><p>判断是否使用部分复制条件：如果从库提供的master_replid与master的replid不同，且与master的replid2不同，或同步速度快于master； 就必须进行全量复制，否则执行部分复制。</p></blockquote><blockquote><p>以下常见的主从切换都可以使用部分复制：</p></blockquote><blockquote><ul><li>一主一从发生切换，A-&gt;B 切换变成 B-&gt;A；</li><li>一主多从发生切换，兄弟节点变成父子节点时；</li><li>级别复制发生切换， A-&gt;B-&gt;C 切换变成 B-&gt;C-&gt;A；</li></ul></blockquote><hr><h4 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h4><p><strong>原理</strong></p><p>redis全量复制的原理是，首先将master本身的RDB文件同步给slave，而在同步期间，master写入的命令也会记录下来（master内部有一个复制缓冲区，会记录同步时master新增的写入），当slave将RDB加载完后，会通过偏移量的对比将这期间master写入的值同步给slave。</p><hr><h4 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h4><p>为什么要部分复制？ 在redis2.8版本之前，如果master和slave之间的网络发生了抖动连接断开，就会导致slave完全不知道master的动作，同步就会出问题，而为了保证数据一致，等网络恢复后进行一次全量复制。而全量复制的开销是很大的，redis2.8版本就提个了一个部分复制的功能。</p><p><strong>原理</strong></p><p>当master和slave断开连接时，master会将期间所做的操作记录到复制缓存区当中（可以看成是一个队列，其大小默认1M）。待slave重连后，slave会向master发送psync命令并传入offset和runId，这时候，如果master发现slave传输的偏移量的值，在缓存区队列范围中，就会将从offset开始到队列结束的数据传给slave，从而达到同步，降低了使用全量复制的开销。</p><h3 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h3><p><a href="https://my.oschina.net/u/3371837/blog/1787643" target="_blank" rel="noopener">https://my.oschina.net/u/3371837/blog/1787643</a></p><p><a href="https://juejin.im/post/5b67029c6fb9a04fa42fd592" target="_blank" rel="noopener">https://juejin.im/post/5b67029c6fb9a04fa42fd592</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Replication-演进&quot;&gt;&lt;a href=&quot;#Replication-演进&quot; class=&quot;headerlink&quot; title=&quot;Replication 演进&quot;&gt;&lt;/a&gt;Replication 演进&lt;/h3&gt;&lt;h4 id=&quot;复制原理&quot;&gt;&lt;a href=&quot;#复
      
    
    </summary>
    
      <category term="DB" scheme="https://sulangsss.github.io/categories/DB/"/>
    
      <category term="Redis" scheme="https://sulangsss.github.io/categories/DB/Redis/"/>
    
    
      <category term="Redis" scheme="https://sulangsss.github.io/tags/Redis/"/>
    
      <category term="DB" scheme="https://sulangsss.github.io/tags/DB/"/>
    
      <category term="Replication" scheme="https://sulangsss.github.io/tags/Replication/"/>
    
  </entry>
  
  <entry>
    <title>Vim Keymap</title>
    <link href="https://sulangsss.github.io/2018/10/29/Vim/Keymap/"/>
    <id>https://sulangsss.github.io/2018/10/29/Vim/Keymap/</id>
    <published>2018-10-29T07:01:22.000Z</published>
    <updated>2018-11-06T05:22:36.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h3><p>dd删除一行，yy复制一行，cc删除一行文本并开始插入，&gt;&gt; 当前行缩进一格，==自动缩进当前行</p><h3 id="Move-Cursor"><a href="#Move-Cursor" class="headerlink" title="Move Cursor"></a>Move Cursor</h3><p>$ - 从光标位置到行尾</p><p>^ - 从光标位置到行首，不包含缩进空白 </p><p>0 - 从光标位置到行首，包含缩进空白 </p><p>gg - 从光标位置到文件开头 </p><p>G - 从光标位置到文件结尾 </p><p>% - 从光标位置到另一边匹配的括号 </p><p>ctrl + u/d - Moves cursor &amp; screen up/donw ½ page</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Edit&quot;&gt;&lt;a href=&quot;#Edit&quot; class=&quot;headerlink&quot; title=&quot;Edit&quot;&gt;&lt;/a&gt;Edit&lt;/h3&gt;&lt;p&gt;dd删除一行，yy复制一行，cc删除一行文本并开始插入，&amp;gt;&amp;gt; 当前行缩进一格，==自动缩进当前行&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
      <category term="Vim" scheme="https://sulangsss.github.io/categories/Vim/"/>
    
    
      <category term="Vim" scheme="https://sulangsss.github.io/tags/Vim/"/>
    
      <category term="Keymap" scheme="https://sulangsss.github.io/tags/Keymap/"/>
    
  </entry>
  
  <entry>
    <title>马克·彭德格拉斯特 - For God,Country &amp;Coca-Cola 可口可乐传</title>
    <link href="https://sulangsss.github.io/2018/10/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BC%A0%E8%AE%B0/%E5%8F%AF%E5%8F%A3%E5%8F%AF%E4%B9%90%E4%BC%A0/"/>
    <id>https://sulangsss.github.io/2018/10/29/读书笔记/传记/可口可乐传/</id>
    <published>2018-10-29T05:07:07.000Z</published>
    <updated>2018-10-29T06:01:32.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3><img src="/2018/10/29/读书笔记/传记/可口可乐传/core.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;核心内容&quot;&gt;&lt;a href=&quot;#核心内容&quot; class=&quot;headerlink&quot; title=&quot;核心内容&quot;&gt;&lt;/a&gt;核心内容&lt;/h3&gt;&lt;img src=&quot;/2018/10/29/读书笔记/传记/可口可乐传/core.png&quot;&gt;

      
    
    </summary>
    
      <category term="读书笔记" scheme="https://sulangsss.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://sulangsss.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="可口可乐传" scheme="https://sulangsss.github.io/tags/%E5%8F%AF%E5%8F%A3%E5%8F%AF%E4%B9%90%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>FMEA（Failure mode and effects analysis）</title>
    <link href="https://sulangsss.github.io/2018/10/28/Architecture/FMEA/"/>
    <id>https://sulangsss.github.io/2018/10/28/Architecture/FMEA/</id>
    <published>2018-10-28T14:01:22.000Z</published>
    <updated>2018-10-29T03:07:17.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Term"><a href="#Term" class="headerlink" title="Term"></a>Term</h3><p>FEMA：故障模式与影响分析，一种在各行各业都有广泛应用的可用性分析方法，通过对系统范围内潜在的故障模式加以分析，并按照严重程度进行分类，以确定失效对于系统的最终影响。<strong>它是一套分析和思考的方法，而不是某个领域的技能或工具。</strong></p><h3 id="应用于架构领域"><a href="#应用于架构领域" class="headerlink" title="应用于架构领域"></a>应用于架构领域</h3><p>FMEA分析方法：</p><ul><li>给出初始的架构设计图</li><li>假设架构中某个部件发生故障</li><li>分析次故障对系统功能造成的影响</li><li>根据分析结果，判断架构是否需要进行优化</li></ul><p>FMEA分析方法，其实是一个分析表，表格包含部分</p><ul><li>功能点：从用户的角度来看的功能点。比如用户管理系统，FEMA分析的是”登录“，”注册“功能点。</li><li>故障模式：系统会出现什么样的故障，包括故障点和故障形式。故障模式描述尽量精确，多用量化描述，避免使用泛华的描述。</li><li>故障影响：当发生故障模式中描述的故障时，功能点具体会受到什么影响。常见的影响：功能点偶尔不可用、功能点完全不可用、部分用户功能点不可用、功能点响应缓慢、功能点出错等等</li><li>严重程度：站在业务的角度看，故障影响程度一般分为：致命、高、中、低、无。严重程度 = 功能点重要程度 <em> 故障影响范围 </em> 功能点受损程度</li><li>故障原因</li><li>故障概率：某个具体故障原因发生的概率。一般分为：高、中、低。</li><li>风险程度：综合严重程度和故障概率一起判断某个故障的最终等级，风险程度 = 严重程度 * 故障概率。</li><li>已有措施：针对具体的故障原因，系统现在是否提供了某些措施来应对，包括检测告警、容错、自恢复等等。</li><li>规避措施：为了降低故障发生概率而做的一些事情，可以是技术手段，也可以是管理手段。<ul><li>为了避免新引入的MongoDB丢失数据，在MySQL中冗余一份</li><li>为了降低某些疑难bug的出现，每天凌晨重启机器</li></ul></li><li>解决措施：为了能够解决问题而做的一些事情，一般都是技术手段。<ul><li>为了解决密码暴力破解，增加密码重试次数限制</li><li>为了解决拖库导致密码泄露，将数据库中的敏感数据加密保存</li></ul></li><li>后续规划</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Term&quot;&gt;&lt;a href=&quot;#Term&quot; class=&quot;headerlink&quot; title=&quot;Term&quot;&gt;&lt;/a&gt;Term&lt;/h3&gt;&lt;p&gt;FEMA：故障模式与影响分析，一种在各行各业都有广泛应用的可用性分析方法，通过对系统范围内潜在的故障模式加以分析，并按照严重
      
    
    </summary>
    
      <category term="Architecture" scheme="https://sulangsss.github.io/categories/Architecture/"/>
    
    
      <category term="Architecture" scheme="https://sulangsss.github.io/tags/Architecture/"/>
    
      <category term="FMEA" scheme="https://sulangsss.github.io/tags/FMEA/"/>
    
  </entry>
  
  <entry>
    <title>DS AVL Tree</title>
    <link href="https://sulangsss.github.io/2018/10/26/DS/AVL-Tree/"/>
    <id>https://sulangsss.github.io/2018/10/26/DS/AVL-Tree/</id>
    <published>2018-10-26T02:28:19.000Z</published>
    <updated>2018-10-28T13:59:35.799Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="DS" scheme="https://sulangsss.github.io/categories/DS/"/>
    
    
      <category term="DS" scheme="https://sulangsss.github.io/tags/DS/"/>
    
      <category term="Tree" scheme="https://sulangsss.github.io/tags/Tree/"/>
    
      <category term="AVL" scheme="https://sulangsss.github.io/tags/AVL/"/>
    
  </entry>
  
  <entry>
    <title>DS Tree</title>
    <link href="https://sulangsss.github.io/2018/10/26/DS/Tree/"/>
    <id>https://sulangsss.github.io/2018/10/26/DS/Tree/</id>
    <published>2018-10-26T02:28:19.000Z</published>
    <updated>2018-10-28T10:47:50.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tree-Feature"><a href="#Tree-Feature" class="headerlink" title="Tree Feature"></a>Tree Feature</h3><ul><li>一个节点，即只有根节点，也可以是一棵树</li><li>其中任何一个节点与下面所有节点构成的树称为子树</li><li>根节点没有父节点，而子叶节点没有子节点</li><li>除根节点外，任何节点有且仅有一个父节点</li><li>任何节点可以有0~n个子节点</li><li>高度与深度的区别：叶子节点定义高度为1<ul><li>高度：从节点到其子叶节点经过的最长路径</li><li>深度：从根节点往下到叶节点最长路径（根节点为1）</li><li>相同深度的节点，高度不一定相同</li></ul></li></ul><h3 id="Binary-Search-Tree（二叉查找树）"><a href="#Binary-Search-Tree（二叉查找树）" class="headerlink" title="Binary Search Tree（二叉查找树）"></a>Binary Search Tree（二叉查找树）</h3><p>遍历方式</p><ul><li>前序遍历</li><li>中序遍历</li><li>后序遍历</li></ul><h3 id="AVL-平衡二叉树"><a href="#AVL-平衡二叉树" class="headerlink" title="AVL(平衡二叉树)"></a>AVL(平衡二叉树)</h3><p>一种平衡二叉查找树，增加和删除节点后通过树形旋转重新达到平衡。</p><p>一颗完美平衡的树查找树中，所有空节点到根节点的距离应该是相同的。</p><p>特性：</p><ul><li>树的左右高度差不能超过1</li><li>任何往下递归的左子树与右子树，必须符合第一条性质</li><li>没有任何节点的空树或只有根节点的树也是平衡二叉树</li></ul><p>在每一次插入数值之后，树的平衡性都可能被破坏，这时可以通过一个简单的操作来矫正平衡–旋转。</p><p>旋转的目的就是减少高度，通过降低整棵树的高度来平衡。哪边的树高，就把那边的树向上旋转。</p><p>旋转操作</p><ul><li>所谓的左旋和右旋都是以子树为原点的：如b是a的子树，那么旋转就围绕b来进行。</li><li>如果b是a的左子树，那么就围绕b将a向右旋转，看着就像是a直接掉下来了，掉成了b的右子树。</li><li>如果b是a的右子树，那么就围绕b将a向左旋转，看着就像是a直接掉下来了，掉成了b的左子树。</li></ul><p>旋转类型</p><ul><li>LL：在a的左子树根节点的左子树上插入节点而破坏平衡，旋转方式-右旋转</li><li>RR：在a的右子树根节点的右子树上插入节点而破坏平衡，旋转方式-左旋转</li><li>LR：在a的左子树根节点的右子树上插入节点而破坏平衡，旋转方式-先左后右</li><li>RL：在a的右子树根节点的左子树上插入节点而破坏平衡，旋转方式-先右后左</li></ul><h4 id="LL"><a href="#LL" class="headerlink" title="LL"></a>LL</h4><img src="/2018/10/26/DS/Tree/example-ll.png"><p>此时，节点7的左子树高度为2，右子树为0，则两边的差值超过1。</p><p>围绕节点5进行右旋转，因为节点5没有右子节点，此时可以直接把节点7设置为节点5的右子节点。需要注意的是，当调节完当前节点的平衡后，需要向上检查是否有节点出现不平衡的现象。</p><p>如果节点5已经存在右子树（节点7是节点5的父节点，肯定比节点5大，即也比节点5的右子节点大），此时节点7如何处理？请看下图</p><img src="/2018/10/26/DS/Tree/example-2-ll.png"><p>仍然针对节点5进行右旋，节点7仍然为节点5的右子树，节点6成为节点7的左子树，此时节点5已经平衡。但是当我们再看节点8的时候，节点8却失衡了。</p><h4 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h4><img src="/2018/10/26/DS/Tree/example-rr.png"><p>如果节点13已经有左子树，怎么办？</p><h4 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h4><img src="/2018/10/26/DS/Tree/example-lr.png"><p>如果节点5已经有左子树，怎么办？</p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><h3 id="应用场景对比"><a href="#应用场景对比" class="headerlink" title="应用场景对比"></a>应用场景对比</h3><h4 id="红黑树与AVL树"><a href="#红黑树与AVL树" class="headerlink" title="红黑树与AVL树"></a>红黑树与AVL树</h4><ul><li>频繁的插入和删除，红黑树更加适合</li><li>低频修改和大量查询，AVL树更加适合</li></ul><h3 id="Refer-to"><a href="#Refer-to" class="headerlink" title="Refer to"></a>Refer to</h3><blockquote><p><a href="https://blog.csdn.net/qq_25806863/article/details/74755131" target="_blank" rel="noopener">https://blog.csdn.net/qq_25806863/article/details/74755131</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tree-Feature&quot;&gt;&lt;a href=&quot;#Tree-Feature&quot; class=&quot;headerlink&quot; title=&quot;Tree Feature&quot;&gt;&lt;/a&gt;Tree Feature&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个节点，即只有根节点，也可以是一棵树&lt;/li&gt;
      
    
    </summary>
    
      <category term="DS" scheme="https://sulangsss.github.io/categories/DS/"/>
    
    
      <category term="DS" scheme="https://sulangsss.github.io/tags/DS/"/>
    
      <category term="Tree" scheme="https://sulangsss.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Java Performance JMH</title>
    <link href="https://sulangsss.github.io/2018/10/25/Java/Performance/JMH/"/>
    <id>https://sulangsss.github.io/2018/10/25/Java/Performance/JMH/</id>
    <published>2018-10-25T09:01:22.000Z</published>
    <updated>2018-10-26T02:13:31.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Usega"><a href="#Usega" class="headerlink" title="Usega"></a>Usega</h3><ul><li>创建测试工程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate </span><br><span class="line"> -DinteractiveMode=<span class="literal">false</span> </span><br><span class="line"> -DarchetypeGroupId=org.openjdk.jmh </span><br><span class="line"> -DarchetypeArtifactId=jmh-java-benchmark-archetype </span><br><span class="line"> -DgroupId=com.afei.jmh </span><br><span class="line"> -DartifactId=jmh </span><br><span class="line"> -Dversion=1.0.0-SNAPSHOT</span><br></pre></td></tr></table></figure><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><h4 id="Unable-to-find-the-resource-META-INF-BenchmarkList"><a href="#Unable-to-find-the-resource-META-INF-BenchmarkList" class="headerlink" title="Unable to find the resource: /META-INF/BenchmarkList"></a>Unable to find the resource: /META-INF/BenchmarkList</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Usega&quot;&gt;&lt;a href=&quot;#Usega&quot; class=&quot;headerlink&quot; title=&quot;Usega&quot;&gt;&lt;/a&gt;Usega&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建测试工程&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Performance" scheme="https://sulangsss.github.io/categories/Java/Performance/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="Performance" scheme="https://sulangsss.github.io/tags/Performance/"/>
    
      <category term="JMH" scheme="https://sulangsss.github.io/tags/JMH/"/>
    
  </entry>
  
  <entry>
    <title>每天一本书：提问的艺术</title>
    <link href="https://sulangsss.github.io/2018/10/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%8F%90%E9%97%AE%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>https://sulangsss.github.io/2018/10/25/读书笔记/提问的艺术/</id>
    <published>2018-10-25T05:51:22.000Z</published>
    <updated>2018-10-25T06:06:15.835Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何提问"><a href="#如何提问" class="headerlink" title="如何提问"></a>如何提问</h3><h4 id="第一步：要从问句开始，而不是用阐述或者命令"><a href="#第一步：要从问句开始，而不是用阐述或者命令" class="headerlink" title="第一步：要从问句开始，而不是用阐述或者命令"></a>第一步：要从问句开始，而不是用阐述或者命令</h4><p>比如，你是公司的老总，对公司的客服不满意，如果你对客服们说“我们需要改进客服质量”，这个效果可能不会很好。</p><p>你可以问他们：“你怎么评价我们今天的客服表现？”这个提问会让客服人员自己琢磨一下：今天能给自己打几分？哪儿做得好？哪儿做得不好？这比你去灌输一些评价，效果要好。处理家庭关系时也能用这个办法。</p><h4 id="第二步：问一些每个人都会想到的、最基本的问题（司空见惯的问题）"><a href="#第二步：问一些每个人都会想到的、最基本的问题（司空见惯的问题）" class="headerlink" title="第二步：问一些每个人都会想到的、最基本的问题（司空见惯的问题）"></a>第二步：问一些每个人都会想到的、最基本的问题（司空见惯的问题）</h4><p>很多事看久了，就习惯了，不太去琢磨它到底是怎么回事了。但有时你仔细思考一下，才发现对一些事儿，其实我们并不太明白它们到底意味着什么。</p><p>比如现在最流行的一个词儿是“创新”。在工作里经常有人说：“我们需要创新。”但是每天听，都听疲沓了，而且搞来搞去，也创新不出什么东西。那么你再听到有人这样说的时候，可以问一问他：“你眼中的创新究竟是什么样的呢？”可能一下子就把人问住了，然后就开始琢磨：是啊，究竟什么样呢？这就不是空喊口号了，开始考虑实际了。</p><h3 id="提问方法"><a href="#提问方法" class="headerlink" title="提问方法"></a>提问方法</h3><ul><li>封闭式提问</li><li>开放性提问</li><li>追问式提问</li></ul><h4 id="封闭式提问"><a href="#封闭式提问" class="headerlink" title="封闭式提问"></a>封闭式提问</h4><p>什么叫封闭型提问呢？就是问得非常具体，对方只能正面回答，给出直接的答案。比如，关于创新、团队的提问，其实都属于封闭型的提问。</p><p>最典型的封闭型提问，是“是非题”，对方只能回答“是”或者“不是”。</p><p><strong>什么时候需要用到封闭型提问呢？</strong>一般是在发生“大猩猩式的斗殴”的时候。</p><p>这儿说的不是真的斗殴，是一种比喻。研究生物的人发现，公猩猩在打架的时候，喜欢互相示威，互相围着转，一边转着，一边在手里抓着土，往天上扬，没别的意思，就是吓唬对方，然后转了半天也打不起来。所以“大猩猩式的斗殴”指的就是兜圈子，不干实事。</p><p>当你和别人谈一件事，别人总是兜圈子时，就适合用封闭型提问，直接要求他给答案。举个例子，公司里开会，讨论的是“客户至上”的话题，一开就是很长时间，总也没有实质性的结论。那么这时候就适合提出封闭型的问题：我们今天要做什么样的决定？是提高客户保有率，还是交叉销售更多的产品？提问越具体，越容易从泛泛的讨论中跳出来。</p><h4 id="开放性提问"><a href="#开放性提问" class="headerlink" title="开放性提问"></a>开放性提问</h4><p>在人际交往中，就需要经常用到第二种提问方式，就是开放性提问。</p><p>所谓开放性，就是没有固定的答案，可以随便说。</p><p>美国著名作家梭罗独自住在波士顿附近的瓦尔登湖畔，他写了一本书叫《瓦尔登湖》，梭罗特别爱写日记，有一天他写了这么一句话：“今天，我得到的最大恭维就是有人问我，我是怎么想的，并真诚地聆听了我的答案。”梭罗写出了人的一种心理，就是希望被聆听。</p><p>这可能有点违反直觉，因为我们总是下意识地以为，和别人聊天时，说得越多，越不容易冷场，越显得尊重别人。但其实不是，绝大多数人实际上更愿意表达，如果你一直在滔滔不绝地说话，别人插不上嘴，等于剥夺了别人表达的权利，对方就会觉得不舒服。</p><p>所以会聊天的人，一定是善于倾听的人。怎么做到这一点呢？还是靠提问，而且得靠开放性的提问。有一次，本书的作者走访安利集团的创始人，他就问了对方一句话，就让这个大老板开始滔滔不绝。他是这么问的：“请告诉我，你当初是如何开始的？”然后，对方就开始讲故事，讲一个大学肄业的人最终如何打造了市值上百亿美元的集团。</p><p>“你是如何开始的”，这个问题可以衍生出很多问题，比如“你们是怎么相爱的”“你在哪里长大的”“你是和谁学的弹琴”。再比如，“你还有什么迫切想实现的愿望吗”“对你来说最高兴的一天是哪一天”“你一生中最值得骄傲的成就是什么”。开放性的问题不能用简单的“是”或“否”来回答，它需要更清楚的解读，会带来更丰富的互动。</p><p>无论是和成功人士还是普通人聊天，这种问题都会让对方发现自己不平凡的一面，愿意与你开心分享他们的故事。</p><h4 id="追问式提问"><a href="#追问式提问" class="headerlink" title="追问式提问"></a>追问式提问</h4><p>沟通不是单方面的事情，它确实需要倾听，但又不能只是倾听。有时候为了发现并且解决一些问题，就需要进行追问。</p><p>有一次，一个国际性企业发现自己的销售出现了问题，觉得需要进行改进性的培训，就找到本书的作者，托他办个培训班。作者没有一上来就答应，而是问了销售部主管五个问题。</p><p>第一个问题：为什么你们在全球销售市场中都成为领先者了，还需要销售培训呢？对方说，因为需要不断提高销售人员的能力；</p><p>他接着问了第二个问题：为什么需要提高销售能力呢？对方又说：这样销售人员在开发新客户方面会更有效率；</p><p>接着是第三个问题：为什么需要增加新客户的开发呢？对方说，因为现在的客户不足以支撑公司的增长目标；</p><p>第四个问题又来了：为什么不能让客户增长得更快呢？对方说：我们每年都20%的客户流失。</p><p>好，最后一个问题：为什么客户会流失？最终，公司的销售人员给出了答案，他们的产品质量和物流有问题，所以客户才不满意。</p><p>就这样，五个问题追问下来，没有做销售培训的必要了，解决产品质量和物流漏洞才是关键。这就是追问的效果，它会帮助你找到问题的核心所在。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>三种提问方式都说到了，我们来总结一下：</p><ul><li>封闭式的提问，适用于得到明确答案时提出；</li><li>开放性提问，适合需要深谈的人际沟通时提出；</li><li>追问，适合在复杂情况中寻找核心问题时提出。</li></ul><p>提问这件事，说起来简单，做起来难。我们经常会被一些事情困扰，想要去解决它们，但是往往找不到原因，更常见的情况是，我们连问题本身是什么都描述不清楚。</p><h3 id="企业组织"><a href="#企业组织" class="headerlink" title="企业组织"></a>企业组织</h3><p>问自己五个问题：</p><ul><li>你的愿景是什么？</li><li>什么是你愿意投入身心去打造最重要的关系？</li><li>什么能创造客户价值？</li><li>你期望得到的结果是什么？</li><li>你的计划是什么？</li></ul><p>核心指向：你为什么要这么做？你的存在是什么价值？你会对别人会产生什么样的影响？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何提问&quot;&gt;&lt;a href=&quot;#如何提问&quot; class=&quot;headerlink&quot; title=&quot;如何提问&quot;&gt;&lt;/a&gt;如何提问&lt;/h3&gt;&lt;h4 id=&quot;第一步：要从问句开始，而不是用阐述或者命令&quot;&gt;&lt;a href=&quot;#第一步：要从问句开始，而不是用阐述或者命令&quot; c
      
    
    </summary>
    
      <category term="读书" scheme="https://sulangsss.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="https://sulangsss.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="提问的艺术" scheme="https://sulangsss.github.io/tags/%E6%8F%90%E9%97%AE%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Inline</title>
    <link href="https://sulangsss.github.io/2018/10/23/Java/Kotlin/Inline/"/>
    <id>https://sulangsss.github.io/2018/10/23/Java/Kotlin/Inline/</id>
    <published>2018-10-23T09:27:22.000Z</published>
    <updated>2018-10-23T10:03:32.417Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>One of them is high order functions which lets you pass functions as parameters as well as return functions. But the fact that they are stored as objects may make the use disadvantageous at times because of the memory overhead. </p><p>The thing is, each object is allocated space in memory heap and the methods that call this method are also allocated space.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    var a = <span class="number">2</span></span><br><span class="line">    println(someMethod(a, &#123;println(<span class="string">"Just some dummy function"</span>)&#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">someMethod</span><span class="params">(a: Int, func: ()</span> -&gt; Unit):Int </span>&#123;</span><br><span class="line">    func()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A way to get around the memory overhead issue is, by declaring the function inline. inline annotation means that function as well as function parameters will be expanded at call site that means it helps reduce call overhead. </p><p>The goal of this post is to get a basic understanding of inline in Kotlin so as to be able to identify how and when to use it in our code in future.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">inline fun <span class="title">someMethod</span><span class="params">(a: Int, func: ()</span> -&gt; Unit):Int </span>&#123;</span><br><span class="line">    func()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h3&gt;&lt;p&gt;One of them is high order functions which lets you pass fu
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Kotlin" scheme="https://sulangsss.github.io/categories/Java/Kotlin/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="Kotlin" scheme="https://sulangsss.github.io/tags/Kotlin/"/>
    
      <category term="Inline" scheme="https://sulangsss.github.io/tags/Inline/"/>
    
  </entry>
  
  <entry>
    <title>Java slf4j</title>
    <link href="https://sulangsss.github.io/2018/10/23/Java/Log/slf4j/"/>
    <id>https://sulangsss.github.io/2018/10/23/Java/Log/slf4j/</id>
    <published>2018-10-23T02:01:22.000Z</published>
    <updated>2018-10-24T03:00:44.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><h4 id="Failed-to-load-class-“org-slf4j-impl-StaticLoggerBinder”"><a href="#Failed-to-load-class-“org-slf4j-impl-StaticLoggerBinder”" class="headerlink" title="Failed to load class “org.slf4j.impl.StaticLoggerBinder”."></a>Failed to load class “org.slf4j.impl.StaticLoggerBinder”.</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jdk14<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Error&quot;&gt;&lt;a href=&quot;#Error&quot; class=&quot;headerlink&quot; title=&quot;Error&quot;&gt;&lt;/a&gt;Error&lt;/h3&gt;&lt;h4 id=&quot;Failed-to-load-class-“org-slf4j-impl-StaticLoggerBind
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Log" scheme="https://sulangsss.github.io/categories/Java/Log/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="Log" scheme="https://sulangsss.github.io/tags/Log/"/>
    
      <category term="slf4j" scheme="https://sulangsss.github.io/tags/slf4j/"/>
    
  </entry>
  
  <entry>
    <title>国际 International</title>
    <link href="https://sulangsss.github.io/2018/10/23/Unpopular-Knowledge/%E5%9B%BD%E9%99%85-International/"/>
    <id>https://sulangsss.github.io/2018/10/23/Unpopular-Knowledge/国际-International/</id>
    <published>2018-10-23T02:01:22.000Z</published>
    <updated>2018-10-25T02:20:44.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一国际-1864-1876年"><a href="#第一国际-1864-1876年" class="headerlink" title="第一国际(1864-1876年)"></a>第一国际(1864-1876年)</h3><p>社会主义先觉者很早就主张各国工人运动有国际的联络和国际的组织之必要了。把这个必要说得最明白，最不含糊的，是马克思和恩格斯。远在1847年，即距今99年前，马克思和恩格斯在他们起草的「共产党宣言」中就断言「无产阶级无祖国」，就喊出「全世界无产者联合起来」口号。自此以后，他们的思想和斗争就浸透这种国际主义精神。</p><p>到了1864年，这种国际主义精神第一次表现为组织形式。这年，英法德意四国工人代表在伦敦开会，决议创立一个「Intelnational WorkingMen’s Association」，为诸国工人团体联络机关。这个新团体底名称直译应为「工人底国际的联合会」，这里「国际」二字是作形容词用的。即「英法德意诸国工人联合会」之意。马克思当时代表德国工人参加这个新团体工作，渐渐以科学的社会主义思想指导整个组织了。不久，会务大大开展，小国工人也来参加这个组织，遂成为世界上一种势力，为诸国政府所畏惧。会名太长，有时人们取它的第一个字，简称为「International」（「国际的」）以后成了习惯，整个团体就叫做「国际」了。这是第一次，这个形容词变成了名词。</p><p>1871年，巴黎工人暴动，「国际」底法国支部不仅参加，而且占据领导地位。可是这次有名的「巴黎公盟」失败了，「国际」受了极大打击，外面资产阶级政府底取缔，里面小资产阶级思想底进攻，遂使组织力量一天比一天衰弱，终于在1876年正式宣布解散。马克思领导的这个「工人国际会」在工人运动历史上被称为「第一国际」，以别于后来的几个工人国际组织。</p><hr><h3 id="第二国际-1889-1914年"><a href="#第二国际-1889-1914年" class="headerlink" title="第二国际(1889-1914年)"></a>第二国际(1889-1914年)</h3><h3 id="第三国际-1919-1943年"><a href="#第三国际-1919-1943年" class="headerlink" title="第三国际(1919-1943年)"></a>第三国际(1919-1943年)</h3><h3 id="第四国际"><a href="#第四国际" class="headerlink" title="第四国际"></a>第四国际</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一国际-1864-1876年&quot;&gt;&lt;a href=&quot;#第一国际-1864-1876年&quot; class=&quot;headerlink&quot; title=&quot;第一国际(1864-1876年)&quot;&gt;&lt;/a&gt;第一国际(1864-1876年)&lt;/h3&gt;&lt;p&gt;社会主义先觉者很早就主张各国工人
      
    
    </summary>
    
      <category term="Unpopular Knowledge" scheme="https://sulangsss.github.io/categories/Unpopular-Knowledge/"/>
    
    
      <category term="Unpopular Knowledge" scheme="https://sulangsss.github.io/tags/Unpopular-Knowledge/"/>
    
      <category term="Internaltional" scheme="https://sulangsss.github.io/tags/Internaltional/"/>
    
      <category term="国际" scheme="https://sulangsss.github.io/tags/%E5%9B%BD%E9%99%85/"/>
    
  </entry>
  
</feed>
