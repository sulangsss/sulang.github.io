<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Big Boy Blog -  Tech Articls &amp; Notes</title>
  
  <subtitle>Python Java Android Django Web -&gt; sulang357159@gmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sulangsss.github.io/"/>
  <updated>2019-10-11T04:40:13.208Z</updated>
  <id>https://sulangsss.github.io/</id>
  
  <author>
    <name>Jason - sulang357159@163.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP/1、HTTP/2和HTTP/3</title>
    <link href="https://sulangsss.github.io/2019/10/11/Network/HTTP/HTTP1,HTTP2,HTTP3/"/>
    <id>https://sulangsss.github.io/2019/10/11/Network/HTTP/HTTP1,HTTP2,HTTP3/</id>
    <published>2019-10-11T02:55:18.000Z</published>
    <updated>2019-10-11T04:40:13.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-1-x"><a href="#HTTP-1-x" class="headerlink" title="HTTP/1.x"></a>HTTP/1.x</h2><p>HTTP协议是HyperText Transfer Protocol（超文本传输协议）的缩写，它是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。伴随着计算机网络和浏览器的诞生，HTTP1.0也随之而来，处于计算机网络中的应用层，HTTP是建立在TCP协议之上，所以HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性，例如tcp建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的RTT延迟时间。</p><h3 id="Weakness"><a href="#Weakness" class="headerlink" title="Weakness"></a>Weakness</h3><h4 id="连接无法复用"><a href="#连接无法复用" class="headerlink" title="连接无法复用"></a>连接无法复用</h4><p>连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对大量小文件请求影响较大（没有达到最大窗口请求就被终止）。</p><ul><li>HTTP/1.0：传输数据时，每次都需要重新建立连接，增加延迟。</li><li>HTTP/1.1：虽然加入keep-alive可以复用一部分连接，但域名分片等情况下仍然需要建立多个connection，耗费资源，给服务器带来性能压力。</li></ul><h4 id="Head-Of-Line-Blocking（HOLB）"><a href="#Head-Of-Line-Blocking（HOLB）" class="headerlink" title="Head-Of-Line Blocking（HOLB）"></a>Head-Of-Line Blocking（HOLB）</h4><p>导致带宽无法被充分利用，以及后续健康请求被阻塞。HOLB是指一系列包（package）因为第一个包被阻塞；当页面中需要请求很多资源的时候，HOLB（队头阻塞）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p><ul><li>HTTP/1.0：下个请求必须在前一个请求返回后才能发出，request-response对按序发生。显然，如果某个请求长时间没有返回，那么接下来的请求就全部阻塞了。</li><li>HTTP/1.1：尝试使用 pipeling 来解决，即浏览器可以一次性发出多个请求（同个域名，同一条 TCP 链接）。但 pipeling 要求返回是按序的，那么前一个请求如果很耗时（比如处理大图片），那么后面的请求即使服务器已经处理完，仍会等待前面的请求处理完才开始按序返回。所以，pipeling 只部分解决了 HOLB。</li></ul><h4 id="协议开销大"><a href="#协议开销大" class="headerlink" title="协议开销大"></a>协议开销大</h4><p>HTTP1.x在使用时，header里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户流量。</p><h4 id="安全因素"><a href="#安全因素" class="headerlink" title="安全因素"></a>安全因素</h4><p>HTTP1.x在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性。</p><hr><h2 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h2><p>2015年，HTTP/2 发布。HTTP/2是现行HTTP协议（HTTP/1.x）的替代，但它不是重写，HTTP方法/状态码/语义都与HTTP/1.x一样。HTTP/2基于SPDY3，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection）。</p><p>HTTP/2由两个规范（Specification）组成：</p><ul><li>Hypertext Transfer Protocol version 2 - RFC7540</li><li>HPACK - Header Compression for HTTP/2 - RFC7541</li></ul><h3 id="SPDY-协议"><a href="#SPDY-协议" class="headerlink" title="SPDY 协议"></a>SPDY 协议</h3><p>因为HTTP/1.x的问题，我们会引入雪碧图、将小图内联、使用多个域名等等的方式来提高性能。不过这些优化都绕开了协议，直到2009年，谷歌公开了自行研发的 SPDY 协议，主要解决HTTP/1.1效率不高的问题。谷歌推出SPDY，才算是正式改造HTTP协议本身。降低延迟，压缩header等等，SPDY的实践证明了这些优化的效果，也最终带来HTTP/2的诞生。</p><p>SPDY 协议在Chrome浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。</p><hr><h3 id="New-Feature"><a href="#New-Feature" class="headerlink" title="New Feature"></a>New Feature</h3><h4 id="二进制传输"><a href="#二进制传输" class="headerlink" title="二进制传输"></a>二进制传输</h4><p>HTTP/2 采用二进制格式传输数据，而非 HTTP 1.x 的文本格式，二进制协议解析起来更高效。 HTTP/1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。<strong>HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码。</strong></p><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制<strong>同一个域名下的请求数量的问题</strong>，同时也接更容易实现<strong>全速传输</strong>，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。</p><p>在 HTTP/2 中，有了二进制分帧之后，HTTP /2 不再依赖 TCP 链接去实现多流并行了，在 HTTP/2中：</p><ul><li>同域名下所有通信都在单个连接上完成。</li><li>单个连接可以承载任意数量的双向数据流。</li><li>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</li></ul><p>这一特性，使性能有了极大提升：</p><ul><li>同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应，消除了因多个 TCP 连接而带来的延时和内存消耗；</li><li>并行交错地发送多个请求，请求之间互不影响；</li><li>并行交错地发送多个响应，响应之间互不干扰；</li><li>在HTTP/2中，每个请求都可以带一个31bit的优先值，0表示最高优先级，数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。</li></ul><img src="/2019/10/11/Network/HTTP/HTTP1,HTTP2,HTTP3/http1-vs-http2.png"><p>如上图所示，多路复用的技术可以只通过一个 TCP 连接就可以传输所有的请求数据。</p><h4 id="Header-压缩"><a href="#Header-压缩" class="headerlink" title="Header 压缩"></a>Header 压缩</h4><p>在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p><p>为了减少这块的资源消耗并提升性能， HTTP/2对这些首部采取了压缩策略：</p><ul><li>HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送；</li><li>首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新；</li><li>每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值。</li></ul><h4 id="Server-Push"><a href="#Server-Push" class="headerlink" title="Server Push"></a>Server Push</h4><p>Server Push即服务端能通过push的方式将客户端需要的内容预先推送过去，也叫 “cache push”。</p><p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch。<br>例如服务端可以主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。</p><p>服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p><hr><h2 id="HTTP-3"><a href="#HTTP-3" class="headerlink" title="HTTP/3"></a>HTTP/3</h2><p>虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。</p><p>上面提到 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。</p><blockquote><p>那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。</p></blockquote><p>基于这个原因，Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上，HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。</p><h3 id="QUIC"><a href="#QUIC" class="headerlink" title="QUIC"></a>QUIC</h3><h4 id="0-RTT"><a href="#0-RTT" class="headerlink" title="0-RTT"></a>0-RTT</h4><p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。<strong>0-RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势。</strong></p><p>0RTT 建连的两层含义：</p><ol><li>传输层 0RTT 就能建立连接。</li><li>加密层 0RTT 就能建立加密连接。</li></ol><img src="/2019/10/11/Network/HTTP/HTTP1,HTTP2,HTTP3/https-and-quic-0rtt.png"><p>上图左边是 HTTPS 的一次完全握手的建连过程，需要3个 RTT。就算是会话复用也需要至少2个 RTT。</p><p>QUIC 由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。</p><blockquote><p>RTT：Round-trip delay time，来回通信延迟。</p></blockquote><h4 id="多路复用-1"><a href="#多路复用-1" class="headerlink" title="多路复用"></a>多路复用</h4><p>虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。</p><p>同HTTP2.0一样，同一条 QUIC连接上可以创建多个stream，来发送多个HTTP请求，但是，QUIC是基于UDP的，一个连接上的多个stream之间没有依赖。比如下图中stream2丢了一个UDP包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然stream2的那个包需要重新传，但是stream3、stream4的包无需等待，就可以发给用户。</p><img src="/2019/10/11/Network/HTTP/HTTP1,HTTP2,HTTP3/quic-loss-package.png"><p>另外QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</p><h4 id="加密认证的报文"><a href="#加密认证的报文" class="headerlink" title="加密认证的报文"></a>加密认证的报文</h4><p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。</p><h4 id="向前纠错机制"><a href="#向前纠错机制" class="headerlink" title="向前纠错机制"></a>向前纠错机制</h4><p>QUIC协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间(包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗)。</p><p>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。<strong>当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。</strong></p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>HTTP/1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷；</li><li>HTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的；</li><li>QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。</li></ul><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[一文读懂HTTP/2 及 HTTP/3特性]<a href="https://segmentfault.com/a/1190000018401534" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018401534</a></li><li>[HTTP/3 的过去、现在和未来]<a href="https://www.infoq.cn/article/x80uOvcRyxVYw3KVusUm" target="_blank" rel="noopener">https://www.infoq.cn/article/x80uOvcRyxVYw3KVusUm</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP-1-x&quot;&gt;&lt;a href=&quot;#HTTP-1-x&quot; class=&quot;headerlink&quot; title=&quot;HTTP/1.x&quot;&gt;&lt;/a&gt;HTTP/1.x&lt;/h2&gt;&lt;p&gt;HTTP协议是HyperText Transfer Protocol（超文本传输协议）的缩写
      
    
    </summary>
    
      <category term="Network" scheme="https://sulangsss.github.io/categories/Network/"/>
    
      <category term="HTTP" scheme="https://sulangsss.github.io/categories/Network/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://sulangsss.github.io/tags/HTTP/"/>
    
      <category term="Network" scheme="https://sulangsss.github.io/tags/Network/"/>
    
      <category term="HTTP/2" scheme="https://sulangsss.github.io/tags/HTTP-2/"/>
    
      <category term="HTTP/3" scheme="https://sulangsss.github.io/tags/HTTP-3/"/>
    
  </entry>
  
  <entry>
    <title>Liquibase Quick Start</title>
    <link href="https://sulangsss.github.io/2019/09/29/DB/Liquibase/Liquibase-Quick-Start/"/>
    <id>https://sulangsss.github.io/2019/09/29/DB/Liquibase/Liquibase-Quick-Start/</id>
    <published>2019-09-29T08:54:07.000Z</published>
    <updated>2019-09-29T08:55:38.333Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><h4 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h4><blockquote><p><a href="https://gist.github.com/JohnnyNiu/e5f7232362cc085e2a9c9e2b683c6026" target="_blank" rel="noopener">https://gist.github.com/JohnnyNiu/e5f7232362cc085e2a9c9e2b683c6026</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Basic&quot;&gt;&lt;a href=&quot;#Basic&quot; class=&quot;headerlink&quot; title=&quot;Basic&quot;&gt;&lt;/a&gt;Basic&lt;/h3&gt;&lt;h4 id=&quot;Data-Type&quot;&gt;&lt;a href=&quot;#Data-Type&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="DB" scheme="https://sulangsss.github.io/categories/DB/"/>
    
      <category term="Liquibase" scheme="https://sulangsss.github.io/categories/DB/Liquibase/"/>
    
    
      <category term="Liquibase" scheme="https://sulangsss.github.io/tags/Liquibase/"/>
    
  </entry>
  
  <entry>
    <title>ES API</title>
    <link href="https://sulangsss.github.io/2019/09/24/ELK/ES/ES-API/"/>
    <id>https://sulangsss.github.io/2019/09/24/ELK/ES/ES-API/</id>
    <published>2019-09-24T10:42:06.000Z</published>
    <updated>2019-09-24T10:49:08.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Performance-Indicator"><a href="#Performance-Indicator" class="headerlink" title="Performance Indicator"></a>Performance Indicator</h3><h4 id="Health"><a href="#Health" class="headerlink" title="Health"></a>Health</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GET _cluster/health</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"jp-pte-es-hot"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"green"</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"number_of_nodes"</span>: <span class="number">46</span>,</span><br><span class="line">  <span class="attr">"number_of_data_nodes"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"active_primary_shards"</span>: <span class="number">4857</span>,</span><br><span class="line">  <span class="attr">"active_shards"</span>: <span class="number">12674</span>,</span><br><span class="line">  <span class="attr">"relocating_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"initializing_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"unassigned_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"delayed_unassigned_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_pending_tasks"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_in_flight_fetch"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"task_max_waiting_in_queue_millis"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"active_shards_percent_as_number"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">指标说明：</span><br><span class="line">status：集群状态，分为green、yellow和red。 </span><br><span class="line">number_of_nodes/number_of_data_nodes:集群的节点数和数据节点数。 </span><br><span class="line">active_primary_shards：集群中所有活跃的主分片数。 </span><br><span class="line">active_shards：集群中所有活跃的分片数。 </span><br><span class="line">relocating_shards：当前节点迁往其他节点的分片数量，通常为0，当有节点加入或者退出时该值会增加。 </span><br><span class="line">initializing_shards：正在初始化的分片。 </span><br><span class="line">unassigned_shards：未分配的分片数，通常为0，当有某个节点的副本分片丢失该值就会增加。 </span><br><span class="line">number_of_pending_tasks：是指主节点创建索引并分配shards等任务，如果该指标数值一直未减小代表集群存在不稳定因素 </span><br><span class="line">active_shards_percent_as_number：集群分片健康度，活跃分片数占总分片数比例。 </span><br><span class="line">number_of_pending_tasks：pending task只能由主节点来进行处理，这些任务包括创建索引并将shards分配给节点。</span><br></pre></td></tr></table></figure><h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _stats</span><br></pre></td></tr></table></figure><h4 id="Cluster-Status"><a href="#Cluster-Status" class="headerlink" title="Cluster Status"></a>Cluster Status</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cluster/stats?pretty</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://blog.51cto.com/michaelkang/2164200" target="_blank" rel="noopener">https://blog.51cto.com/michaelkang/2164200</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Performance-Indicator&quot;&gt;&lt;a href=&quot;#Performance-Indicator&quot; class=&quot;headerlink&quot; title=&quot;Performance Indicator&quot;&gt;&lt;/a&gt;Performance Indicator&lt;/
      
    
    </summary>
    
      <category term="ELK" scheme="https://sulangsss.github.io/categories/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/categories/ELK/ES/"/>
    
    
      <category term="ELK" scheme="https://sulangsss.github.io/tags/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/tags/ES/"/>
    
      <category term="API" scheme="https://sulangsss.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>ES Optimize</title>
    <link href="https://sulangsss.github.io/2019/09/24/ELK/ES/ES-Optimize/"/>
    <id>https://sulangsss.github.io/2019/09/24/ELK/ES/ES-Optimize/</id>
    <published>2019-09-24T10:15:06.000Z</published>
    <updated>2019-09-24T13:58:18.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><h4 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h4><ul><li><p>index.refresh_interval: 默认的刷新时间间隔是1s，对于写入量很大的场景，这样的配置会导致写入吞吐量很低，适当提高刷新间隔，可以提升写入量，代价就是让新写入的数据在60s之后可以被搜索，新数据可见的及时性有所下降。</p><blockquote><p>“index.refresh_interval”: “60s”</p></blockquote></li><li><p>index.translog.sync_interval</p><blockquote><p>“sync_interval”: “120s”</p></blockquote></li><li><p>index.translog.durability</p><blockquote><p>“durability”: “async”</p></blockquote></li><li><p>index.translog.flush_threshold_size</p><blockquote><p>“flush_threshold_size”:”1g”</p></blockquote></li></ul><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>[从 10 秒到 2 秒！ElasticSearch 性能调优]<a href="https://juejin.im/post/5c3e9813518825552880084a" target="_blank" rel="noopener">https://juejin.im/post/5c3e9813518825552880084a</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h3&gt;&lt;h4 id=&quot;Parameter&quot;&gt;&lt;a href=&quot;#Parameter&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="ELK" scheme="https://sulangsss.github.io/categories/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/categories/ELK/ES/"/>
    
    
      <category term="ELK" scheme="https://sulangsss.github.io/tags/ELK/"/>
    
      <category term="Optimize" scheme="https://sulangsss.github.io/tags/Optimize/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>ES Shard</title>
    <link href="https://sulangsss.github.io/2019/09/24/ELK/ES/ES-Shard/"/>
    <id>https://sulangsss.github.io/2019/09/24/ELK/ES/ES-Shard/</id>
    <published>2019-09-24T10:13:06.000Z</published>
    <updated>2019-09-24T10:15:13.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Shard"><a href="#Shard" class="headerlink" title="Shard"></a>Shard</h3><p>Shard本质上就是一个Lucene索引, 因此会消耗相应的文件句柄, 内存和CPU资源。</p><blockquote><p>一个 Index 其实是有存储上限的（除非你设置足够多的 Shards 和机器），如官方声明单个 Shard 的文档数不能超过 20 亿（受限于 Lucene index，每个 Shard 是一个 Lucene index）。<br>每个搜索请求会调度到索引的每个分片中. 如果分片分散在不同的节点倒是问题不太. 但当分片开始竞争相同的硬件资源时, 性能便会逐步下降。</p></blockquote><p>shard_num = hash(_routing) % num_primary_shards</p><blockquote><p>其中 hash(_routing) 得出一个数字，然后除以主 Shards 的数量得到一个余数，余数的范围是 0 到 number_of_primary_shards - 1，这个数字就是文档所在的 Shard。Routing 默认是 id 值，当然可以自定义，合理指定 Routing 能够大幅提升查询效率，Routing 支持 GET、Delete、Update、Post、Put 等操作。</p></blockquote><p>考虑到 I、O，针对 Index 每个 Node 的 Shards 数最好不超过 3 个，那面对这样一个庞大的 Index，我们是采用更多的 Shards，还是更多的 Index，我们如何选择？</p><p>Index 的 Shards 总量也不宜太多，更多的 Shards 会带来更多的 I、O 开销，其实答案就已经很明确，除非你能接受长时间的查询等待。</p><p>Index 拆分的思路很简单，时序索引有一个好处就是只有增加，没有变更，按时间累积，天然对索引的拆分友好支持，可以按照时间和数据量做任意时间段的拆分。</p><p>ES 提供的 Rollover Api + Index Template 可以非常便捷和友好的实现 Index 的拆分工作，把单个 index docs 数量控制在百亿内，也就是一个 Index 默认 5 个 Shards 左右即可，保证查询的即时响应。</p><h4 id="Shard-Count"><a href="#Shard-Count" class="headerlink" title="Shard Count"></a>Shard Count</h4><p>当我们节点数和Shard数相等时，ElasticSearch 集群的性能可以达到最优。即，对于一个3节点集群，我们为每个集群节点分配1个 Shard，总共3个 Shard。</p><p>但是由于 ElasticSearch 的不可变性（Immutable）的限制，系统无法对 Shard 进行重新拆分分配，除非重新索引这个文件集合。所以，当我们需要增加更多节点的时候，又希望 Shard 能利用到增加节点带来的系统性能提升时，我们就不得不进行重新索引，由于重索引开销巨大，这是我们不希望看到的。</p><p>如果单个node分配多个Shard，就会引入另外一系列的性能问题，我们知道对于任意一次完整的搜索，ElasticSearch会分别对每个Shard进行查询，最后进行汇总。当节点数和Shard数是一对一的时候，所有的查询可以并行运行。但是，对于具有多个Shard的节点，如果磁盘是15000RPM或SSD，可能会相对较快，但是这也会存在等待响应的问题，所以通常不推荐一个节点超过2个Shard。</p><p>3节点6个Shard，即每个节点2个Shard，这可以使我们在未来轻松的横向扩展到6个节点，应对许多极端的场景。</p><h4 id="Replica-Count"><a href="#Replica-Count" class="headerlink" title="Replica Count"></a>Replica Count</h4><p>Replica也是Shard，与Shard不同的是，Replica只会参与读操作，同时也能提高集群的可用性。</p><p>对于Replica来说，它的主要作用就是提高集群错误恢复的能力，所以Replica的数目与Shard的数目以及Node的数目相关，与Shard不同的是，Replica的数目可以在集群建立之后变更，切代价较小，所以相比Shard的数目而言，没有那么重要。</p><p>如果宕机了，Replica是什么情况？</p><p><strong>假设条件: 3 Nodes, 3 Shards, 0 Relicas</strong></p><p><strong>假设一个Node宕机</strong></p><img src="/2019/09/24/ELK/ES/ES-Shard/replica_exp_1.png"><p>此时，对应的索引不可用。</p><p><strong>假设条件: 3 Nodes, 3 Shards, 1 Relicas</strong></p><p><strong>假设一个Node宕机</strong></p><img src="/2019/09/24/ELK/ES/ES-Shard/replica_exp_2.png"><p>此时，索引可用</p><p><strong>假设两个Node宕机</strong></p><img src="/2019/09/24/ELK/ES/ES-Shard/replica_exp_3.png"><p>此时，索引仍然可用。</p><p><strong>假设条件: 3 Nodes, 3 Shards, 2 Relicas</strong></p><img src="/2019/09/24/ELK/ES/ES-Shard/replica_exp_4.png"><blockquote><p>如果存储费用比较便宜，推荐使用</p></blockquote><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>[Shard数调优]<a href="https://www.cnblogs.com/richaaaard/p/5231905.html" target="_blank" rel="noopener">https://www.cnblogs.com/richaaaard/p/5231905.html</a></li><li><a href="https://www.javazhiyin.com/36443.html" target="_blank" rel="noopener">https://www.javazhiyin.com/36443.html</a></li><li><a href="https://segmentfault.com/a/1190000008868585" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008868585</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Shard&quot;&gt;&lt;a href=&quot;#Shard&quot; class=&quot;headerlink&quot; title=&quot;Shard&quot;&gt;&lt;/a&gt;Shard&lt;/h3&gt;&lt;p&gt;Shard本质上就是一个Lucene索引, 因此会消耗相应的文件句柄, 内存和CPU资源。&lt;/p&gt;
&lt;blockqu
      
    
    </summary>
    
      <category term="ELK" scheme="https://sulangsss.github.io/categories/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/categories/ELK/ES/"/>
    
    
      <category term="ELK" scheme="https://sulangsss.github.io/tags/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/tags/ES/"/>
    
      <category term="Shard" scheme="https://sulangsss.github.io/tags/Shard/"/>
    
  </entry>
  
  <entry>
    <title>ES Error</title>
    <link href="https://sulangsss.github.io/2019/09/23/ELK/ES/ES-ERROR/"/>
    <id>https://sulangsss.github.io/2019/09/23/ELK/ES/ES-ERROR/</id>
    <published>2019-09-23T04:13:06.000Z</published>
    <updated>2019-09-23T04:15:00.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="retrying-failed-action-with-response-code-403-“type”-gt-”cluster-block-exception”-“reason”-gt-”blocked-by-FORBIDDEN-12-index-read-only-allow-delete-api-”"><a href="#retrying-failed-action-with-response-code-403-“type”-gt-”cluster-block-exception”-“reason”-gt-”blocked-by-FORBIDDEN-12-index-read-only-allow-delete-api-”" class="headerlink" title="retrying failed action with response code: 403 ({“type”=&gt;”cluster_block_exception”, “reason”=&gt;”blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];”})"></a>retrying failed action with response code: 403 ({“type”=&gt;”cluster_block_exception”, “reason”=&gt;”blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];”})</h3><p>Cause: 当某个数据节点的存储空间超过95%时，如果此时再分配分片的索引进来，那么该索引将强制进入只读模式。</p><p>Solution: </p><ol><li><p>在 Kibana 开发控制台执行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT _settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"index"</span>: &#123;</span><br><span class="line">    <span class="attr">"blocks"</span>: &#123;</span><br><span class="line">      <span class="attr">"read_only_allow_delete"</span>: <span class="string">"false"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 API 接口设置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -H "Content-Type: application/json" http://localhost:9200/_all/_settings -d '&#123;"index.blocks.read_only_allow_delete": null&#125;'</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><a href="https://www.aityp.com/%E8%A7%A3%E5%86%B3elasticsearch%E7%B4%A2%E5%BC%95%E5%8F%AA%E8%AF%BB/" target="_blank" rel="noopener">https://www.aityp.com/%E8%A7%A3%E5%86%B3elasticsearch%E7%B4%A2%E5%BC%95%E5%8F%AA%E8%AF%BB/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;retrying-failed-action-with-response-code-403-“type”-gt-”cluster-block-exception”-“reason”-gt-”blocked-by-FORBIDDEN-12-index-read-on
      
    
    </summary>
    
      <category term="ELK" scheme="https://sulangsss.github.io/categories/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/categories/ELK/ES/"/>
    
    
      <category term="ELK" scheme="https://sulangsss.github.io/tags/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/tags/ES/"/>
    
      <category term="ERROR" scheme="https://sulangsss.github.io/tags/ERROR/"/>
    
  </entry>
  
  <entry>
    <title>ES Remove History Data</title>
    <link href="https://sulangsss.github.io/2019/09/18/ELK/ES/ES-Remove-History-Data/"/>
    <id>https://sulangsss.github.io/2019/09/18/ELK/ES/ES-Remove-History-Data/</id>
    <published>2019-09-18T09:50:06.000Z</published>
    <updated>2019-09-18T09:54:25.174Z</updated>
    
    <content type="html"><![CDATA[<h3 id="delete-by-query-Official-Recommendation"><a href="#delete-by-query-Official-Recommendation" class="headerlink" title="_delete_by_query - Official Recommendation"></a>_delete_by_query - Official Recommendation</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -u 用户名:密码  -H'Content-Type:application/json' -d'&#123;</span><br><span class="line">    "query": &#123;</span><br><span class="line">        "range": &#123;</span><br><span class="line">            "@timestamp": &#123;</span><br><span class="line">                "lt": "now-7d",</span><br><span class="line">                "format": "epoch_millis"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">' -XPOST "http://127.0.0.1:9200/*-*/_delete_by_query?pretty"</span><br></pre></td></tr></table></figure><ul><li>-XPOST是指定用POST方式请求</li><li>-u 是格式为userName:password，使用Basic Auth进行登录。如果elasticsearch没有使用类似x-pack进行安全登录，则不需要加-u参数</li><li>-H是指定文档类型是json格式</li><li>-d是指定body内容<blockquote><p>range: 范围;<br>@timestamp: 时间字段;<br>“lt”: “now-7d” lt是小于(&lt;)，lte是小于等于(&lt;=),gt是大于(&gt;),gte是大于等于(&gt;=),now-7d是当前时间减7天</p></blockquote></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>[elasticsearch按照日期定时批量删除索引]<a href="https://juejin.im/post/58e5de06ac502e006c254145" target="_blank" rel="noopener">https://juejin.im/post/58e5de06ac502e006c254145</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;delete-by-query-Official-Recommendation&quot;&gt;&lt;a href=&quot;#delete-by-query-Official-Recommendation&quot; class=&quot;headerlink&quot; title=&quot;_delete_by_que
      
    
    </summary>
    
      <category term="ELK" scheme="https://sulangsss.github.io/categories/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/categories/ELK/ES/"/>
    
    
      <category term="ELK" scheme="https://sulangsss.github.io/tags/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>Java I/O Practice</title>
    <link href="https://sulangsss.github.io/2019/09/18/Java/Java-IO/"/>
    <id>https://sulangsss.github.io/2019/09/18/Java/Java-IO/</id>
    <published>2019-09-18T07:01:22.000Z</published>
    <updated>2019-09-24T13:58:22.439Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FileChannel-And-MMAP"><a href="#FileChannel-And-MMAP" class="headerlink" title="FileChannel And MMAP"></a>FileChannel And MMAP</h3><p>Java IO 操作：</p><ul><li>普通 I/O (java.io): 阻塞式</li><li>File Channel (java.nio): 阻塞式</li><li>MMAP (java.nio): File Channel 衍生出来的一种方式，非阻塞式</li></ul><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  FIleChannel 的方式</span></span><br><span class="line">FileChannel fileChannel = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"db.data"</span>), <span class="string">"rw"</span>).getChannel();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MMAP 的方式</span></span><br><span class="line">MappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, filechannel.size();</span><br></pre></td></tr></table></figure><p>Write and Read Operation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写</span></span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line"><span class="keyword">long</span> position = <span class="number">1024L</span>;</span><br><span class="line"><span class="comment">//指定 position 写入 4kb 的数据</span></span><br><span class="line">fileChannel.write(ByteBuffer.wrap(data), position);</span><br><span class="line"><span class="comment">//从当前文件指针的位置写入 4kb 的数据</span></span><br><span class="line">fileChannel.write(ByteBuffer.wrap(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读</span></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line"><span class="keyword">long</span> position = <span class="number">1024L</span>;</span><br><span class="line"><span class="comment">//指定 position 读取 4kb 的数据</span></span><br><span class="line">fileChannel.read(buffer,position)；</span><br><span class="line"><span class="comment">//从当前文件指针的位置读取 4kb 的数据</span></span><br><span class="line">fileChannel.read(buffer);</span><br></pre></td></tr></table></figure><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>[文件IO操作的一些最佳实践]<a href="https://www.cnkirito.moe/file-io-best-practise/" target="_blank" rel="noopener">https://www.cnkirito.moe/file-io-best-practise/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;FileChannel-And-MMAP&quot;&gt;&lt;a href=&quot;#FileChannel-And-MMAP&quot; class=&quot;headerlink&quot; title=&quot;FileChannel And MMAP&quot;&gt;&lt;/a&gt;FileChannel And MMAP&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="I/O" scheme="https://sulangsss.github.io/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>CQRS Introduction</title>
    <link href="https://sulangsss.github.io/2019/09/17/CQRS/CQRS-Introduction/"/>
    <id>https://sulangsss.github.io/2019/09/17/CQRS/CQRS-Introduction/</id>
    <published>2019-09-17T04:35:06.000Z</published>
    <updated>2019-09-17T08:33:52.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction-Command-Query-Responsibility-Segregation-CQRS"><a href="#Introduction-Command-Query-Responsibility-Segregation-CQRS" class="headerlink" title="Introduction - Command Query Responsibility Segregation (CQRS)"></a>Introduction - Command Query Responsibility Segregation (CQRS)</h3><p>Q: How to implement a query that retrieves data from multiple services in a microservice architecture?</p><p>A: Define a view database, which is a read-only replica that is designed to support that query. The application keeps the replica up to data by subscribing to Domain events published by the service that own the data.</p><img src="/2019/09/17/CQRS/CQRS-Introduction/QuerySideService.png"><p><strong>This pattern has the following benefits:</strong></p><ul><li>Supports multiple denormalized views that are scalable and performant</li><li>Improved separation of concerns = simpler command and query models</li><li>Necessary in an event sourced architecture</li></ul><p><strong>This pattern has the following drawbacks:</strong></p><ul><li>Increased complexity</li><li>Potential code duplication</li><li>Replication lag/eventually consistent views</li></ul><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>[Command Query Responsibility Segregation (CQRS)] <a href="https://microservices.io/patterns/data/cqrs.html" target="_blank" rel="noopener">https://microservices.io/patterns/data/cqrs.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction-Command-Query-Responsibility-Segregation-CQRS&quot;&gt;&lt;a href=&quot;#Introduction-Command-Query-Responsibility-Segregation-CQRS&quot; cl
      
    
    </summary>
    
      <category term="CQRS" scheme="https://sulangsss.github.io/categories/CQRS/"/>
    
    
      <category term="CQRS" scheme="https://sulangsss.github.io/tags/CQRS/"/>
    
      <category term="Introduction" scheme="https://sulangsss.github.io/tags/Introduction/"/>
    
  </entry>
  
  <entry>
    <title>Aeron Core Configurations</title>
    <link href="https://sulangsss.github.io/2019/09/08/Java/LowLatency/Aeron-Configuration/"/>
    <id>https://sulangsss.github.io/2019/09/08/Java/LowLatency/Aeron-Configuration/</id>
    <published>2019-09-08T04:01:22.000Z</published>
    <updated>2019-09-08T04:16:42.283Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><h4 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a>MTU</h4><p>aeron.mtu.length on the Media Driver controls the length of the MTU of data frames. This value is communicated to the Aeron clients during registration. So, applications do not have to concern themselves with the MTU value used by the Media Driver and use the same value.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Network&quot;&gt;&lt;a href=&quot;#Network&quot; class=&quot;headerlink&quot; title=&quot;Network&quot;&gt;&lt;/a&gt;Network&lt;/h3&gt;&lt;h4 id=&quot;MTU&quot;&gt;&lt;a href=&quot;#MTU&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="Low Latency" scheme="https://sulangsss.github.io/categories/Java/Low-Latency/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="Low Latency" scheme="https://sulangsss.github.io/tags/Low-Latency/"/>
    
      <category term="Aeron" scheme="https://sulangsss.github.io/tags/Aeron/"/>
    
      <category term="Cofiguration" scheme="https://sulangsss.github.io/tags/Cofiguration/"/>
    
  </entry>
  
  <entry>
    <title>UDP - Message too long</title>
    <link href="https://sulangsss.github.io/2019/09/07/Network/UDP/Message-too-long/"/>
    <id>https://sulangsss.github.io/2019/09/07/Network/UDP/Message-too-long/</id>
    <published>2019-09-07T06:57:00.000Z</published>
    <updated>2019-09-07T10:01:13.489Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cause"><a href="#Cause" class="headerlink" title="Cause"></a>Cause</h3><hr><h3 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h3><p>Use ICMP pacakge to find out best MTU value</p><blockquote><p>IP pacakge header occupy 20 bytes, ICMP package header occupy 8 bytes.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line"><span class="comment"># google.com 216.58.204.110</span></span><br><span class="line"><span class="comment"># ping -c (number) -M do -s (bytes) IP</span></span><br><span class="line">ping -c 1 -M <span class="keyword">do</span> -s 1470 216.58.204.110</span><br><span class="line"><span class="comment"># or ping -c 1 -M do -s 1472 216.58.204.110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># regular output</span></span><br><span class="line">--- 216.58.204.110 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 4.616/4.616/4.616/0.000 ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ping -c 1 -M <span class="keyword">do</span> -s 1500 216.58.204.110</span><br><span class="line"><span class="comment"># or ping -c 1 -M do -s 1473 216.58.204.110</span></span><br><span class="line"><span class="comment"># error output</span></span><br><span class="line">PING 216.58.204.110 (216.58.204.110) 1500(1528) bytes of data.</span><br><span class="line">ping: <span class="built_in">local</span> error: Message too long, mtu=1500</span><br><span class="line"></span><br><span class="line">--- 216.58.204.110 ping statistics ---</span><br><span class="line">1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Cause&quot;&gt;&lt;a href=&quot;#Cause&quot; class=&quot;headerlink&quot; title=&quot;Cause&quot;&gt;&lt;/a&gt;Cause&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;Practice&quot;&gt;&lt;a href=&quot;#Practice&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="Network" scheme="https://sulangsss.github.io/categories/Network/"/>
    
      <category term="UDP" scheme="https://sulangsss.github.io/categories/Network/UDP/"/>
    
    
      <category term="Network" scheme="https://sulangsss.github.io/tags/Network/"/>
    
      <category term="UDP" scheme="https://sulangsss.github.io/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>ELK Filebeats Configuration</title>
    <link href="https://sulangsss.github.io/2019/08/29/ELK/Filebeats/Filebeats-Prospectors/"/>
    <id>https://sulangsss.github.io/2019/08/29/ELK/Filebeats/Filebeats-Prospectors/</id>
    <published>2019-08-29T10:13:06.000Z</published>
    <updated>2019-08-29T10:03:47.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>[Configure inputs]<a href="https://www.elastic.co/guide/en/beats/filebeat/6.4/configuration-filebeat-options.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/6.4/configuration-filebeat-options.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;[Configure inputs]&lt;a href=&quot;https://w
      
    
    </summary>
    
      <category term="ELK" scheme="https://sulangsss.github.io/categories/ELK/"/>
    
      <category term="Filebeats" scheme="https://sulangsss.github.io/categories/ELK/Filebeats/"/>
    
    
      <category term="Configuration" scheme="https://sulangsss.github.io/tags/Configuration/"/>
    
      <category term="ELK" scheme="https://sulangsss.github.io/tags/ELK/"/>
    
      <category term="Filebeats" scheme="https://sulangsss.github.io/tags/Filebeats/"/>
    
  </entry>
  
  <entry>
    <title>ELK Logstash Configuration</title>
    <link href="https://sulangsss.github.io/2019/08/29/ELK/Logstash/Logstash-Configuration/"/>
    <id>https://sulangsss.github.io/2019/08/29/ELK/Logstash/Logstash-Configuration/</id>
    <published>2019-08-29T10:13:06.000Z</published>
    <updated>2019-08-29T10:03:06.762Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><h4 id="Codec"><a href="#Codec" class="headerlink" title="Codec"></a>Codec</h4><p>Codec 是 logstash 从 1.3.0 版开始新引入的概念(Codec 来自 Coder/decoder 两个单词的首字母缩写)。</p><p>在此之前，logstash 只支持纯文本形式输入，然后以过滤器处理它。但现在，我们可以在输入 期处理不同类型的数据，这全是因为有了 codec 设置。</p><p>Logstash 不只是一个input | filter | output 的数据流，而是一个 input | decode | filter | encode | output 的数据流！codec 就是用来 decode、encode 事件的。</p><p>codec 的引入，使得 logstash 可以更好更方便的与其他有自定义数据格式的运维产品共存，比如 graphite、fluent、netflow、collectd，以及使用 msgpack、json、edn 等通用数据格式的其他产品等。</p><blockquote><p><a href="http://www.21yunwei.com/archives/5296" target="_blank" rel="noopener">http://www.21yunwei.com/archives/5296</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Plugins&quot;&gt;&lt;a href=&quot;#Plugins&quot; class=&quot;headerlink&quot; title=&quot;Plugins&quot;&gt;&lt;/a&gt;Plugins&lt;/h3&gt;&lt;h4 id=&quot;Codec&quot;&gt;&lt;a href=&quot;#Codec&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="ELK" scheme="https://sulangsss.github.io/categories/ELK/"/>
    
      <category term="Logstash" scheme="https://sulangsss.github.io/categories/ELK/Logstash/"/>
    
    
      <category term="Configuration" scheme="https://sulangsss.github.io/tags/Configuration/"/>
    
      <category term="ELK" scheme="https://sulangsss.github.io/tags/ELK/"/>
    
      <category term="Logstash" scheme="https://sulangsss.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>ES Configurations</title>
    <link href="https://sulangsss.github.io/2019/08/29/ELK/ES/ES-Configuration/"/>
    <id>https://sulangsss.github.io/2019/08/29/ELK/ES/ES-Configuration/</id>
    <published>2019-08-29T10:13:06.000Z</published>
    <updated>2019-09-24T13:53:21.416Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Shards"><a href="#Shards" class="headerlink" title="Shards"></a>Shards</h3><h4 id="Modify-the-default-number-of-shards"><a href="#Modify-the-default-number-of-shards" class="headerlink" title="Modify the default number of shards"></a>Modify the default number of shards</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/_template/index_defaults </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"index_patterns"</span>: <span class="string">"*"</span>, </span><br><span class="line">  <span class="string">"settings"</span>: &#123;</span><br><span class="line">    <span class="string">"number_of_shards"</span>: 3,</span><br><span class="line">    <span class="string">"number_of_replicas"</span>: 0,</span><br><span class="line">    <span class="string">"index.refresh_interval"</span>:<span class="string">"15s"</span>,</span><br><span class="line">    <span class="string">"index.translog"</span>: &#123;</span><br><span class="line">        <span class="string">"sync_interval"</span>: <span class="string">"120s"</span>,</span><br><span class="line">        <span class="string">"durability"</span>: <span class="string">"async"</span>, </span><br><span class="line">        <span class="string">"flush_threshold_size"</span>:<span class="string">"1g"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl -XPOST  -H "Content-Type:application/json" -d '&#123;"template":"*","settings":&#123;"number_of_shards":1&#125;&#125;' http://elasticsearch-client-service:9200/_template/default</span></span><br><span class="line"><span class="comment"># curl -XPOST  -H "Content-Type:application/json" -d '&#123;"template":"*","settings":&#123;"number_of_shards":3,"number_of_replicas":0,"index.refresh_interval":"60s","index.translog":&#123;"sync_interval":"120s","durability":"async","flush_threshold_size":"1g"&#125;&#125;&#125;' http://elasticsearch-client-service:9200/_template/default</span></span><br><span class="line"><span class="comment"># https://www.jianshu.com/p/f0e9ab2a47fe</span></span><br><span class="line"><span class="comment"># https://www.objectrocket.com/blog/elasticsearch/clustered-elasticsearch-best-practices/</span></span><br><span class="line"><span class="comment"># https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Shards&quot;&gt;&lt;a href=&quot;#Shards&quot; class=&quot;headerlink&quot; title=&quot;Shards&quot;&gt;&lt;/a&gt;Shards&lt;/h3&gt;&lt;h4 id=&quot;Modify-the-default-number-of-shards&quot;&gt;&lt;a href=&quot;#Mo
      
    
    </summary>
    
      <category term="ELK" scheme="https://sulangsss.github.io/categories/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/categories/ELK/ES/"/>
    
    
      <category term="Configuration" scheme="https://sulangsss.github.io/tags/Configuration/"/>
    
      <category term="ELK" scheme="https://sulangsss.github.io/tags/ELK/"/>
    
      <category term="ES" scheme="https://sulangsss.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis Usage</title>
    <link href="https://sulangsss.github.io/2019/08/27/Java/MyBatis/MyBatis-Usage/"/>
    <id>https://sulangsss.github.io/2019/08/27/Java/MyBatis/MyBatis-Usage/</id>
    <published>2019-08-27T10:32:13.000Z</published>
    <updated>2019-08-27T10:47:33.534Z</updated>
    
    <content type="html"><![CDATA[<h3 id="符号使用"><a href="#符号使用" class="headerlink" title="符号使用"></a>符号使用</h3><h4 id="和-的区别"><a href="#和-的区别" class="headerlink" title="# 和 $ 的区别"></a># 和 $ 的区别</h4><ul><li>使用 #{parameterName} 引用参数的时候，Mybatis 会把这个参数认为是一个字符串，例如 sql 传入参数 “Smith”，Select from emp where name = #{employeeName}；</li><li>使用 ${parameterName} 引用参数的时候，上述例子中的 sql 语句变为 Select from emp where name = Smith；</li></ul><p>简单来说，#{} 是经过预编译的是安全的，而 ${} 是未经过预编译的，仅仅是取变量的值是非安全的，存在 sql 注入的危险。# 将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。</p><hr><h3 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h3><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>[这也许是你不曾留意过的 Mybatis 细节]<a href="https://juejin.im/post/5bce743ee51d457a4b4f956f" target="_blank" rel="noopener">https://juejin.im/post/5bce743ee51d457a4b4f956f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;符号使用&quot;&gt;&lt;a href=&quot;#符号使用&quot; class=&quot;headerlink&quot; title=&quot;符号使用&quot;&gt;&lt;/a&gt;符号使用&lt;/h3&gt;&lt;h4 id=&quot;和-的区别&quot;&gt;&lt;a href=&quot;#和-的区别&quot; class=&quot;headerlink&quot; title=&quot;# 和 $ 的
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="MyBatis" scheme="https://sulangsss.github.io/categories/Java/MyBatis/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="MyBatis" scheme="https://sulangsss.github.io/tags/MyBatis/"/>
    
      <category term="Usage" scheme="https://sulangsss.github.io/tags/Usage/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis Delete</title>
    <link href="https://sulangsss.github.io/2019/08/26/Java/MyBatis/MyBatis-Delete/"/>
    <id>https://sulangsss.github.io/2019/08/26/Java/MyBatis/MyBatis-Delete/</id>
    <published>2019-08-26T07:32:13.000Z</published>
    <updated>2019-08-27T07:35:14.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Delete&quot;&gt;&lt;a href=&quot;#Delete&quot; class=&quot;headerlink&quot; title=&quot;Delete&quot;&gt;&lt;/a&gt;Delete&lt;/h3&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="MyBatis" scheme="https://sulangsss.github.io/categories/Java/MyBatis/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="MyBatis" scheme="https://sulangsss.github.io/tags/MyBatis/"/>
    
      <category term="Delete" scheme="https://sulangsss.github.io/tags/Delete/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis Paging Query</title>
    <link href="https://sulangsss.github.io/2019/08/26/Java/MyBatis/MyBatis-Page/"/>
    <id>https://sulangsss.github.io/2019/08/26/Java/MyBatis/MyBatis-Page/</id>
    <published>2019-08-26T07:32:13.000Z</published>
    <updated>2019-08-27T08:28:39.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Paging-Query"><a href="#Paging-Query" class="headerlink" title="Paging Query"></a>Paging Query</h3><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="getUserArticles" parameterType="Your_params" resultMap="resultUserArticleList"&gt;</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">    user.id,</span><br><span class="line">    user.userName,</span><br><span class="line">    user.userAddress,</span><br><span class="line">    article.id </span><br><span class="line">    aid,</span><br><span class="line">    article.title,</span><br><span class="line">    article.content </span><br><span class="line">    <span class="keyword">from</span> <span class="keyword">user</span>,article </span><br><span class="line">    <span class="keyword">where</span> user.id=article.userid <span class="keyword">and</span> user.id=#&#123;<span class="keyword">id</span>&#125; <span class="keyword">limit</span> #&#123;<span class="keyword">offset</span>&#125;,#&#123;pagesize&#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Paging-Query&quot;&gt;&lt;a href=&quot;#Paging-Query&quot; class=&quot;headerlink&quot; title=&quot;Paging Query&quot;&gt;&lt;/a&gt;Paging Query&lt;/h3&gt;&lt;h4 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Exampl
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="MyBatis" scheme="https://sulangsss.github.io/categories/Java/MyBatis/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="MyBatis" scheme="https://sulangsss.github.io/tags/MyBatis/"/>
    
      <category term="Paging Query" scheme="https://sulangsss.github.io/tags/Paging-Query/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Status</title>
    <link href="https://sulangsss.github.io/2019/08/26/DB/MySQL/MySQL-Status/"/>
    <id>https://sulangsss.github.io/2019/08/26/DB/MySQL/MySQL-Status/</id>
    <published>2019-08-26T04:13:13.000Z</published>
    <updated>2019-08-26T04:13:35.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Connections"><a href="#Connections" class="headerlink" title="Connections"></a>Connections</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">where</span> <span class="string">`variable_name`</span> = <span class="string">'Threads_connected'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Connections&quot;&gt;&lt;a href=&quot;#Connections&quot; class=&quot;headerlink&quot; title=&quot;Connections&quot;&gt;&lt;/a&gt;Connections&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="DB" scheme="https://sulangsss.github.io/categories/DB/"/>
    
      <category term="MySQL" scheme="https://sulangsss.github.io/categories/DB/MySQL/"/>
    
    
      <category term="DB" scheme="https://sulangsss.github.io/tags/DB/"/>
    
      <category term="MySQL" scheme="https://sulangsss.github.io/tags/MySQL/"/>
    
      <category term="Stauts" scheme="https://sulangsss.github.io/tags/Stauts/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis Batch</title>
    <link href="https://sulangsss.github.io/2019/08/23/Java/MyBatis/MyBatis-Batch/"/>
    <id>https://sulangsss.github.io/2019/08/23/Java/MyBatis/MyBatis-Batch/</id>
    <published>2019-08-23T11:27:13.000Z</published>
    <updated>2019-08-27T07:32:37.723Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Batch-Update"><a href="#Batch-Update" class="headerlink" title="Batch Update"></a>Batch Update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PositionMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">insert</span><span class="params">(position: Position)</span>: Int</span></span><br><span class="line"><span class="function">    fun <span class="title">insertList</span><span class="params">(list: List&lt;Position&gt;)</span>: Int</span></span><br><span class="line"><span class="function">    fun <span class="title">updateList</span><span class="params">(list: List&lt;Position&gt;)</span>: Int</span></span><br><span class="line"><span class="function">    fun <span class="title">update</span><span class="params">(bean: Position)</span>: Int</span></span><br><span class="line"><span class="function">    fun <span class="title">find</span><span class="params">(id: Long)</span>: Position?</span></span><br><span class="line"><span class="function">    @Flush</span></span><br><span class="line"><span class="function">    fun <span class="title">flush</span><span class="params">()</span>: List&lt;BatchResult&gt;</span></span><br><span class="line"><span class="function">    fun <span class="title">deleteAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateList"</span> <span class="attr">parameterType</span>=<span class="string">"it.unimi.dsi.fastutil.objects.ReferenceArrayList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        update tb_positions set</span><br><span class="line">        size=#&#123;item.size&#125;,</span><br><span class="line">        cost=#&#123;item.cost&#125;,</span><br><span class="line">        status=#&#123;item.status&#125;,</span><br><span class="line">        update_time=#&#123;item.updateTime&#125;</span><br><span class="line">        where position_id=#&#123;item.positionId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Usage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">getBatchCount</span><span class="params">(results: List&lt;BatchResult&gt;)</span>: Int </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (results.isEmpty()) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    val batchResult = results[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (batchResult.updateCounts.isEmpty()) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> batchResult.updateCounts[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">batchUpdate</span><span class="params">(positions: List&lt;Position&gt;)</span>: Boolean </span>&#123;</span><br><span class="line">    val session = MyBatisFactory.getSqlSession(type = ExecutorType.BATCH)</span><br><span class="line">    val mapper = session.getMapper(PositionMapper::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"><span class="class">    <span class="title">return</span> <span class="title">try</span> </span>&#123;</span><br><span class="line">        mapper.updateList(positions)</span><br><span class="line">        results = mapper.flush()</span><br><span class="line">        val updateRow = MyBatisUtil.getBatchCount(results)</span><br><span class="line">        <span class="keyword">if</span> (updateRow &gt; <span class="number">0</span>) updateRow = positions.size</span><br><span class="line">        session.commit()</span><br><span class="line">        updateRow == positions.size</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: RuntimeException) &#123;</span><br><span class="line">        logger.error(<span class="string">"batchUpdate(): occur error, error is"</span>, e)</span><br><span class="line">        session.rollback()</span><br><span class="line">        <span class="keyword">false</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        session.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Batch-Insert"><a href="#Batch-Insert" class="headerlink" title="Batch Insert"></a>Batch Insert</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertList"</span> <span class="attr">parameterType</span>=<span class="string">"it.unimi.dsi.fastutil.objects.ReferenceArrayList"</span>&gt;</span></span><br><span class="line">    INSERT INTO tb_positions(</span><br><span class="line">    size,</span><br><span class="line">    cost,</span><br><span class="line">    status,</span><br><span class="line">    create_time,</span><br><span class="line">    update_time</span><br><span class="line">    )</span><br><span class="line">    VALUES</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"it"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        (</span><br><span class="line">        #&#123;it.size&#125;,</span><br><span class="line">        #&#123;it.cost&#125;,</span><br><span class="line">        #&#123;it.status&#125;,</span><br><span class="line">        #&#123;it.createTime&#125;,</span><br><span class="line">        #&#123;it.updateTime&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">batchInsert</span><span class="params">(positions: List&lt;Position&gt;)</span>: Boolean </span>&#123;</span><br><span class="line">    val session = MyBatisFactory.getSqlSession(type = ExecutorType.BATCH)</span><br><span class="line">    val mapper = session.getMapper(PositionMapper::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"><span class="class">    <span class="title">return</span> <span class="title">try</span> </span>&#123;</span><br><span class="line">        mapper.insertList(positions)</span><br><span class="line">        results = mapper.flush()</span><br><span class="line">        val insertRow = MyBatisUtil.getBatchCount(results)</span><br><span class="line">        session.commit()</span><br><span class="line">        insertRow == positions.size</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: RuntimeException) &#123;</span><br><span class="line">        logger.error(<span class="string">"batchInsert(): occur error, error is"</span>, e)</span><br><span class="line">        session.rollback()</span><br><span class="line">        <span class="keyword">false</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        session.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://blog.csdn.net/q957967519/article/details/88669552" target="_blank" rel="noopener">https://blog.csdn.net/q957967519/article/details/88669552</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Batch-Update&quot;&gt;&lt;a href=&quot;#Batch-Update&quot; class=&quot;headerlink&quot; title=&quot;Batch Update&quot;&gt;&lt;/a&gt;Batch Update&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="Java" scheme="https://sulangsss.github.io/categories/Java/"/>
    
      <category term="MyBatis" scheme="https://sulangsss.github.io/categories/Java/MyBatis/"/>
    
    
      <category term="Java" scheme="https://sulangsss.github.io/tags/Java/"/>
    
      <category term="MyBatis" scheme="https://sulangsss.github.io/tags/MyBatis/"/>
    
      <category term="Batch" scheme="https://sulangsss.github.io/tags/Batch/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Preparement SQL</title>
    <link href="https://sulangsss.github.io/2019/08/22/DB/MySQL/Optimize/Preparement-SQL/"/>
    <id>https://sulangsss.github.io/2019/08/22/DB/MySQL/Optimize/Preparement-SQL/</id>
    <published>2019-08-22T04:08:13.000Z</published>
    <updated>2019-08-27T07:35:31.642Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>对于频繁使用的语句，使用服务端预编译+缓存效率还是能够得到可观的提升的。但是对于不频繁使用的语句，服务端预编译本身会增加额外的round-trip，因此在实际开发中可以视情况定夺使用本地预编译还是服务端预编译以及哪些sql语句不需要开启预编译等。</p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>[从源码角度聊一聊JDBC和Mysql的预编译特性]<a href="https://my.oschina.net/kailuncen/blog/905395" target="_blank" rel="noopener">https://my.oschina.net/kailuncen/blog/905395</a></li><li>[预编译语句(Prepared Statements)介绍，以MySQL为例]<a href="https://www.cnblogs.com/micrari/p/7112781.html" target="_blank" rel="noopener">https://www.cnblogs.com/micrari/p/7112781.html</a></li><li>[MyBatis 原理浅析——基本原理]<a href="https://zhuanlan.zhihu.com/p/27039371" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27039371</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;对于频繁使用的语句，使用服务端预编译+缓存效率还是能够得到可观的提升的。但是
      
    
    </summary>
    
      <category term="DB" scheme="https://sulangsss.github.io/categories/DB/"/>
    
      <category term="MySQL" scheme="https://sulangsss.github.io/categories/DB/MySQL/"/>
    
      <category term="Optimize" scheme="https://sulangsss.github.io/categories/DB/MySQL/Optimize/"/>
    
    
      <category term="DB" scheme="https://sulangsss.github.io/tags/DB/"/>
    
      <category term="MySQL" scheme="https://sulangsss.github.io/tags/MySQL/"/>
    
      <category term="Optimize" scheme="https://sulangsss.github.io/tags/Optimize/"/>
    
      <category term="Preparement SQL" scheme="https://sulangsss.github.io/tags/Preparement-SQL/"/>
    
  </entry>
  
</feed>
